YUI.add("yuidoc-meta", function(Y) {
   Y.YUIDoc = { meta: {
    "classes": [
        "bb.content",
        "bb.lib",
        "bb.lib.box.content",
        "bb.lib.box.left",
        "bb.lib.dialog",
        "bb.lib.dialog.action",
        "bb.lib.dialog.confirm",
        "bb.lib.dialog.info",
        "bb.lib.dialog.valueSelector",
        "bb.lib.pagelet",
        "bb.lib.pagelet.dashboard",
        "bb.lib.pagelet.detail",
        "bb.lib.pagelet.entry",
        "bb.lib.pagelet.gesture",
        "bb.lib.pagelet.list",
        "bb.lib.pagelet.listItem",
        "bb.lib.widget",
        "bb.lib.widget.button",
        "bb.lib.widget.checkbox",
        "bb.lib.widget.list",
        "bb.lib.widget.listItem",
        "bb.lib.widget.search",
        "bb.lib.widget.slider",
        "bb.lib.widget.slideswitch",
        "bb.lib.widget.toolbar",
        "boards.content",
        "boards.lib",
        "bundle.Gruntfile",
        "bundle.doc",
        "bundle.example.media",
        "bundle.examples.media.config",
        "control.content",
        "control.lib",
        "control.lib.activity",
        "control.lib.din",
        "control.lib.din.pin",
        "control.lib.distributor",
        "control.lib.door",
        "control.lib.door.pin",
        "control.lib.flowMeter",
        "control.lib.heater",
        "control.lib.heater.pin",
        "control.lib.heater.tariff",
        "control.lib.light",
        "control.lib.light.pin",
        "control.lib.light.remote",
        "control.lib.light.switch",
        "control.lib.pin",
        "control.lib.pin.commands",
        "control.lib.pin.counter",
        "control.lib.pin.din",
        "control.lib.pin.dout",
        "control.lib.pin.light",
        "control.lib.pin.list",
        "control.lib.pin.pwm",
        "control.lib.pin.switch",
        "control.lib.remote",
        "control.lib.room",
        "control.lib.switch",
        "control.lib.switch.relay",
        "control.lib.switch.socket",
        "dvb.content",
        "dvb.lib",
        "dvb.lib.channel",
        "fs.content",
        "fs.lib",
        "fs.lib.dir",
        "fs.lib.file",
        "icecast.content",
        "icecast.lib",
        "icecast.lib.stream",
        "lirc.content",
        "lirc.lib",
        "lirc.lib.lirc",
        "media.content",
        "media.lib",
        "media.lib.item",
        "media.lib.player",
        "media.lib.player.commands",
        "media.lib.player.dvb",
        "media.lib.player.playback",
        "media.lib.player.volume",
        "media.lib.sources",
        "media.lib.stream",
        "ose.content",
        "ose.core",
        "ose.lib.browser",
        "ose.lib.cli",
        "ose.lib.counter",
        "ose.lib.entry",
        "ose.lib.entry.link",
        "ose.lib.entry.master",
        "ose.lib.entry.slave",
        "ose.lib.http",
        "ose.lib.http.content",
        "ose.lib.kind",
        "ose.lib.link",
        "ose.lib.logger",
        "ose.lib.node",
        "ose.lib.peer.here",
        "ose.lib.peer.list",
        "ose.lib.peer.remote",
        "ose.lib.peer.rx",
        "ose.lib.plugins",
        "ose.lib.scope",
        "ose.lib.shard",
        "ose.lib.shard.master",
        "ose.lib.shard.slave",
        "ose.lib.space",
        "ose.lib.space.list",
        "ose.lib.ws",
        "ose.lib.ws.browser",
        "ose.lib.ws.master",
        "ose.lib.ws.node",
        "ose.lib.ws.relay",
        "ose.lib.ws.slave",
        "ose.wrap.class",
        "ose.wrap.common",
        "ose.wrap.module",
        "ose.wrap.package",
        "ose.wrap.singleton",
        "pa.content",
        "pa.lib",
        "pa.lib.dbus",
        "rpi.content",
        "rpi.lib",
        "rpi.lib.camera",
        "rpi.lib.rpi",
        "videolan.content",
        "videolan.lib",
        "videolan.lib.dvblast",
        "videolan.lib.dvblast.master",
        "videolan.lib.vlc",
        "xorg.content",
        "xorg.lib",
        "xorg.lib.xorg",
        "youtube.content",
        "youtube.lib",
        "youtube.lib.video"
    ],
    "modules": [
        "bb",
        "bb.box",
        "bb.dialog",
        "bb.pagelet",
        "bb.stateObj",
        "bb.widget",
        "boards",
        "bundle",
        "bundle.media",
        "control",
        "control.distributor",
        "control.pin",
        "control.remote",
        "control.room",
        "dvb",
        "fs",
        "icecast",
        "lirc",
        "media",
        "media.history",
        "media.player",
        "media.source",
        "media.stream",
        "ose",
        "ose.data",
        "ose.http",
        "ose.link",
        "ose.logger",
        "ose.peer",
        "ose.plugin",
        "ose.wrap",
        "pa",
        "rpi",
        "videolan",
        "xorg",
        "youtube"
    ],
    "allModules": [
        {
            "displayName": "bb",
            "name": "bb",
            "description": "OSE package providing an HTML5 user interface based on [Firefox OS\nBuilding Blocks](http://buildingfirefoxos.com/) using\n[jQuery](http://www.jquery.com).\n\nEach browser page (tab) displaying the OSE frontend is an {{#crossLinkModule \"ose.peer\"}}OSE\ninstance{{/crossLinkModule}}. As part of the base {{#crossLinkModule \"ose.plugin\"}}OSE plugin{{/crossLinkModule}} configuration, a\n{{#crossLink \"ose.lib.peer.remote\"}}peer{{/crossLink}}, representing the backend OSE instance, is created and\nconnected to.\n\nThe connection is realized via a WebSocket in a standard OSE\n{{#crossLinkModule \"ose.peer\"}}peer-to-peer{{/crossLinkModule}} way. All information needed for displaying requested\ncontent is exchanged through this WebSocket channel. After a\nsuccessful connection is established, content is displayed using\ndynamic injection into the `<body>`.\n\n## Features\n- HTML5 user interface optimized for phones and tablets\n- Own widgets based on [Firefox OS Building\n  Blocks](http://buildingfirefoxos.com/)\n- Touchscreen gesture support using\n  [Hammer.js](http://eightmedia.github.io/hammer.js)\n\n## Status\n- Pre-alpha stage (insecure and buggy)\n- Unstable API\n- Gaps in the documentation\n- No test suite\n\nThis is not yet a piece of download-and-use software. Its important\nto understand the basic principles covered by this documentation.\n\nUse of this software is currently recommended only for users that\nwish participate in the development process (see Contributions).\n\nTODO: Make contribution a link\n\n## Getting started\nTo get started with OSE, refer to the {{#crossLinkModule \"bundle\"}}ose-bundle{{/crossLinkModule}} package and\n{{#crossLinkModule \"bundle.media\"}}Media player example application{{/crossLinkModule}}.\n\n## Initialization\n\nWhen the browser sends an HTML request to a backend (Node.js) OSE\ninstance, this instance responds by generating and providing\nindex.html. The `<head>` of the index.html contains `<script>` and\n`<style>` tags. Most of these scripts are shared between Node.js\nand the browser environments. The `<body>` contains a single\n`<script>` that loads the application.\n\n## Components\nOpen Smart Environment HTML5 frontend consists of the following components:\n- Boxes\n- Dialogs\n- Pagelets\n- Widgets\n- State objects\n\n### Boxes\nBoxes are parts of the html body corresponding to basic layout\ncomponents of the web application. `<body>` contains two boxes:\n* `left`: sidebar on the left\n* `content`: main box of the application\n\nThe `content` box displays a \"pagelet\" specified by the state object.\n\nRead more about {{#crossLinkModule \"bb.box\"}}Boxes{{/crossLinkModule}} ...\n\n\n### Dialogs\nDialogs are fullscreen modal controls.\n\nRead more about {{#crossLinkModule \"bb.dialog\"}}Dialogs{{/crossLinkModule}} ...\n\n\n### Pagelets\nA pagelet is a part of a page.\n\nThere are several types of pagelets (see `lib/pagelet`\ndirectory).\nThe dashboard pagelet is a starting point for the user.\nTwo other basic pagelets are the entry pagelet (displays one\nentry) and the list pagelet (displays a list of entries).\n\nEach {{#crossLink \"ose.lib.kind\"}}entry kind{{/crossLink}} can define own UI layout and behaviour for any pagelet type displaying entry in an individual file.\n\nPagelets can create and contain various widgets (see `lib/widget`\ndirectory) and other pagelets.\n\nRead more about {{#crossLinkModule \"bb.pagelet\"}}Pagelets{{/crossLinkModule}} ...\n\n\n### Widgets\nA Widget is an easily reusable control visually represented by\nHTML5 elements. Their behaviour is controlled by instances of\ndescendants of the {{#crossLink \"bb.lib.widget\"}}Widget class{{/crossLink}}.\n\nRead more about {{#crossLinkModule \"bb.widget\"}}Widgets{{/crossLinkModule}} ...\n\n\n### State objects\nThe state object defines what is displayed by the application. It\ncan be saved in the browser's history. Boxes and pagelets receive\nthe state object in as a parameter of their `display()` methods.\n\nRead more about {{#crossLinkModule \"bb.stateObj\"}}State objects{{/crossLinkModule}} ...\n\n\n## Modules\nOpen Smart Environment HTML5 frontend consists of the following modules:\n- OSE Building Blocks core\n- Building Blocks content\n\n### OSE Building Blocks core\nCore singleton of bb plugin.\n\nThis singleton is available through the `Ose.ui` property.\n\nModule {{#crossLink \"bb.lib\"}}OSE Building Blocks core{{/crossLink}} reference ... \n\n### Building Blocks content\nThis singleton defines which files to provide to browsers.\n\nModule {{#crossLink \"bb.content\"}}Building Blocks content{{/crossLink}} reference ... \n\n## Contributions\nTo get started contributing or coding, it is good to read about the\ntwo main npm packages {{#crossLinkModule \"ose\"}}ose{{/crossLinkModule}} and {{#crossLinkModule \"bb\"}}ose-bb{{/crossLinkModule}}.\n\nThis software is in the pre-alpha stage. At the moment, it is\npremature to file bugs. Input is, however, much welcome in the form\nof ideas, comments and general suggestions.  Feel free to contact\nus via\n[github.com/opensmartenvironment](https://github.com/opensmartenvironment).\n\n## Licence\nThis software is licensed under the terms of the [GNU GPL version\n3](../LICENCE) or later\n"
        },
        {
            "displayName": "bb.box",
            "name": "bb.box",
            "description": "Boxes are parts of the html body corresponding to basic layout\ncomponents of the web application. `<body>` contains two boxes:\n* `left`: sidebar on the left\n* `content`: main box of the application\n\nThe `content` box displays a \"pagelet\" specified by the state object.\n\n## Modules\nBoxes consists of the following modules:\n- Content box\n- Left box\n\n### Content box\nClass handling displaying of the main content box on the page.\n\nIt is placed right in the `<body>` and displays the header and the\nmain content of the application. It also contains widget such as\nthe search box.\n\nModule {{#crossLink \"bb.lib.box.content\"}}Content box{{/crossLink}} reference ... \n\n### Left box\nClass handling displaying of left side box.\n\nIt is placed right in the `<body>` and contains the slidable left\nsidebar.\n\nModule {{#crossLink \"bb.lib.box.left\"}}Left box{{/crossLink}} reference ... \n"
        },
        {
            "displayName": "bb.dialog",
            "name": "bb.dialog",
            "description": "Dialogs are fullscreen modal controls.\n\n## Modules\nDialogs consists of the following modules:\n- Action dialog\n- Confirmation dialog\n- Dialog\n- Information dialog\n- Value selector dialog\n\n### Action dialog\nDiplays a dialog with an action menu\n\nModule {{#crossLink \"bb.lib.dialog.action\"}}Action dialog{{/crossLink}} reference ... \n\n### Confirmation dialog\nDiplays a confirmation dialog with message and two buttons.\n\nModule {{#crossLink \"bb.lib.dialog.confirm\"}}Confirmation dialog{{/crossLink}} reference ... \n\n### Dialog\nClass defining dialogs\n\nModule {{#crossLink \"bb.lib.dialog\"}}Dialog{{/crossLink}} reference ... \n\n### Information dialog\nDiplays a dialog with a message\n\nModule {{#crossLink \"bb.lib.dialog.info\"}}Information dialog{{/crossLink}} reference ... \n\n### Value selector dialog\nDiplays a dialog offering options to select from.\n\nModule {{#crossLink \"bb.lib.dialog.valueSelector\"}}Value selector dialog{{/crossLink}} reference ... \n"
        },
        {
            "displayName": "bb.pagelet",
            "name": "bb.pagelet",
            "description": "A pagelet is a part of a page.\n\nThere are several types of pagelets (see `lib/pagelet`\ndirectory).\nThe dashboard pagelet is a starting point for the user.\nTwo other basic pagelets are the entry pagelet (displays one\nentry) and the list pagelet (displays a list of entries).\n\nEach {{#crossLink \"ose.lib.kind\"}}entry kind{{/crossLink}} can define own UI layout and behaviour for any pagelet type displaying entry in an individual file.\n\nPagelets can create and contain various widgets (see `lib/widget`\ndirectory) and other pagelets.\n\n## Modules\nPagelets consists of the following modules:\n- Dashboard pagelet\n- Detail pagelet\n- Entry pagelet socket\n- Gesture pagelet\n- Pagelet class\n- List of entries pagelet\n- Entry list item pagelet\n\n### Dashboard pagelet\nPagelet for creating dashboard content.\n\nModule {{#crossLink \"bb.lib.pagelet.dashboard\"}}Dashboard pagelet{{/crossLink}} reference ... \n\n### Detail pagelet\nPagelet for displaying entry detail\n\nModule {{#crossLink \"bb.lib.pagelet.detail\"}}Detail pagelet{{/crossLink}} reference ... \n\n### Entry pagelet socket\nExtension for entry pagelet classes.\n\nModule {{#crossLink \"bb.lib.pagelet.entry\"}}Entry pagelet socket{{/crossLink}} reference ... \n\n### Gesture pagelet\nPagelet for displaying an entry with the gesture interface.\n\nThis pagelet creates a canvas on which, for example, gesture traces\ncan be drawn. A transparent `<div>` placed over this canvas is a\nHammer.js element registering touch gestures.\n\nModule {{#crossLink \"bb.lib.pagelet.gesture\"}}Gesture pagelet{{/crossLink}} reference ... \n\n### Pagelet class\nNot every pagelet is necessarily a descendant of this class. Some\nare direct descendants of the widget class.\n\nModule {{#crossLink \"bb.lib.pagelet\"}}Pagelet class{{/crossLink}} reference ... \n\n### List of entries pagelet\nPagelet for displaying lists of entries\n\nModule {{#crossLink \"bb.lib.pagelet.list\"}}List of entries pagelet{{/crossLink}} reference ... \n\n### Entry list item pagelet\nPagelet for displaying a list item\n\nModule {{#crossLink \"bb.lib.pagelet.listItem\"}}Entry list item pagelet{{/crossLink}} reference ... \n"
        },
        {
            "displayName": "bb.stateObj",
            "name": "bb.stateObj",
            "description": "The state object defines what is displayed by the application. It\ncan be saved in the browser's history. Boxes and pagelets receive\nthe state object in as a parameter of their `display()` methods.\n\n## Modules\nState objects consists of the following modules:\n"
        },
        {
            "displayName": "bb.widget",
            "name": "bb.widget",
            "description": "A Widget is an easily reusable control visually represented by\nHTML5 elements. Their behaviour is controlled by instances of\ndescendants of the {{#crossLink \"bb.lib.widget\"}}Widget class{{/crossLink}}.\n\nTODO: Move to the widget directory\n\n## Modules\nWidgets consists of the following modules:\n- Button widget\n- Checkbox widget\n- Widget class\n- List widget\n- List item widget\n- Search widget\n- Slider widget\n- Slideswitch widget\n- Toolbar widget\n\n### Button widget\nWidget for displaying and controlling HTML buttons.\n\nModule {{#crossLink \"bb.lib.widget.button\"}}Button widget{{/crossLink}} reference ... \n\n### Checkbox widget\nWidget for displaying and controlling HTML checkboxes.\n\nModule {{#crossLink \"bb.lib.widget.checkbox\"}}Checkbox widget{{/crossLink}} reference ... \n\n### Widget class\nAncestor for individual widgets and pagelets.\n\nModule {{#crossLink \"bb.lib.widget\"}}Widget class{{/crossLink}} reference ... \n\n### List widget\nWidget for displaying simple HTML lists.\n\nModule {{#crossLink \"bb.lib.widget.list\"}}List widget{{/crossLink}} reference ... \n\n### List item widget\nWidget for displaying items in HTML lists.\n\nModule {{#crossLink \"bb.lib.widget.listItem\"}}List item widget{{/crossLink}} reference ... \n\n### Search widget\nSearch input field widget.\n\nIt has two states: One displays a search button, and the other\ndisplays a search form.\n\nIf available, it uses Google's speech API.\n\nModule {{#crossLink \"bb.lib.widget.search\"}}Search widget{{/crossLink}} reference ... \n\n### Slider widget\nWidget for displaying and controlling HTML sliders.\n\nModule {{#crossLink \"bb.lib.widget.slider\"}}Slider widget{{/crossLink}} reference ... \n\n### Slideswitch widget\nWidget for displaying and controlling HTML slideswitches.\n\nModule {{#crossLink \"bb.lib.widget.slideswitch\"}}Slideswitch widget{{/crossLink}} reference ... \n\n### Toolbar widget\nWidget for displaying and controlling button toolbars.\n\nModule {{#crossLink \"bb.lib.widget.toolbar\"}}Toolbar widget{{/crossLink}} reference ... \n"
        },
        {
            "displayName": "boards",
            "name": "boards",
            "description": "This package contains definitions of {{#crossLink \"ose.lib.kind\"}}kinds of entries{{/crossLink}} that\nrepresent OSE boards. These boards use the {{#crossLinkModule \"control.pin\"}}pins{{/crossLinkModule}} component and\nallow to control < 250 V AC and < 30 V DC appliances.\n\nBoards are intended to be used in a power distributor.\n\nOSE boards are in development, and their production date is not yet\nspecified.\n\n## Status\n- Pre-alpha stage (insecure and buggy)\n- Unstable API\n- Gaps in the documentation\n- No test suite\n\nThis is not yet a piece of download-and-use software. Its important\nto understand the basic principles covered by this documentation.\n\nUse of this software is currently recommended only for users that\nwish participate in the development process (see Contributions).\n\nTODO: Make contribution a link\n\n## Getting started\nTo get started with OSE, refer to the {{#crossLinkModule \"bundle\"}}ose-bundle{{/crossLinkModule}} package and\n{{#crossLinkModule \"bundle.media\"}}Media player example application{{/crossLinkModule}}.\n\n## Modules\nOpen Smart Environment Boards package consists of the following modules:\n- OSE Boards core\n- OSE boards content\n\n### OSE Boards core\nCore singleton of ose-boards npm package. Registers {{#crossLink \"ose.lib.kind\"}}entry kinds{{/crossLink}}\ndefined by this package to the `control` {{#crossLink \"ose.lib.scope\"}}scope{{/crossLink}}.\n\nModule {{#crossLink \"boards.lib\"}}OSE Boards core{{/crossLink}} reference ... \n\n### OSE boards content\nProvides files of OSE boards package to the browser.\n\nModule {{#crossLink \"boards.content\"}}OSE boards content{{/crossLink}} reference ... \n\n## Contributions\nTo get started contributing or coding, it is good to read about the\ntwo main npm packages {{#crossLinkModule \"ose\"}}ose{{/crossLinkModule}} and {{#crossLinkModule \"bb\"}}ose-bb{{/crossLinkModule}}.\n\nThis software is in the pre-alpha stage. At the moment, it is\npremature to file bugs. Input is, however, much welcome in the form\nof ideas, comments and general suggestions.  Feel free to contact\nus via\n[github.com/opensmartenvironment](https://github.com/opensmartenvironment).\n\n## Licence\nThis software is licensed under the terms of the [GNU GPL version\n3](../LICENCE) or later\n"
        },
        {
            "displayName": "bundle",
            "name": "bundle",
            "description": "This package wraps all official OSE packages, contains examples and\nallows documentation building using YUIDoc.\n\nThe main advantage of OSE is the easy creation of applications\nconsisting of multiple instances working as a single whole. The\nobjective is to develop an all-encompassing personal mesh running\nvarious devices including HTPCs, phones, tablets, workstations,\nservers, Raspberry PIs, home automation gadgets, drones etc.\n\n## Status\n- Pre-alpha stage (insecure and buggy)\n- Unstable API\n- Gaps in the documentation\n- No test suite\n\nThis is not yet a piece of download-and-use software. Its important\nto understand the basic principles covered by this documentation.\n\nUse of this software is currently recommended only for users that\nwish participate in the development process (see Contributions).\n\nTODO: Make contribution a link\n\n## Getting started\nTo get started with OSE, refer to the {{#crossLinkModule \"bundle.media\"}}Media player example\napplication{{/crossLinkModule}}.\n\n## Components\nOpen Smart Environment Bundle consists of the following components:\n- Media player example application\n\n### Media player example application\nThis example is an stand-alone application based on\nthe OSE framework, showcasing some of its principles and\ncapabilities. This application works as a currently half-featured\nmedia player and remote control on Linux boxes. The example\napplication has the following features:\n\n- Node.js backend\n- Control via HTML5 frontend instances\n- Near-realtime synchronization among all front- and backend\n  instances\n- Keyboard and pointer remote control using xdotool\n- Playback of different media using VLC\n- Predefined media streams\n- Icecast directory search and playback\n<!--- - DVB sources -->\n- Youtube search and playback\n- Local files playback\n- Playback from history\n<!--- - IR remote control using LIRC -->\n\nOther example applications consisting of multiple instances working\nas a single whole are coming.\n\nRead more about {{#crossLinkModule \"bundle.media\"}}Media player example application{{/crossLinkModule}} ...\n\n\n## Modules\nOpen Smart Environment Bundle consists of the following modules:\n- Gruntfile\n- Documentation build script\n\n### Gruntfile\n\n\nModule {{#crossLink \"bundle.Gruntfile\"}}Gruntfile{{/crossLink}} reference ... \n\n### Documentation build script\nTo build complete documentation, go to the `bundle` directory and run:\n\n    grunt docs\n\nModule {{#crossLink \"bundle.doc\"}}Documentation build script{{/crossLink}} reference ... \n\n## Contributions\nTo get started contributing or coding, it is good to read about the\ntwo main npm packages {{#crossLinkModule \"ose\"}}ose{{/crossLinkModule}} and {{#crossLinkModule \"bb\"}}ose-bb{{/crossLinkModule}}.\n\nThis software is in the pre-alpha stage. At the moment, it is\npremature to file bugs. Input is, however, much welcome in the form\nof ideas, comments and general suggestions.  Feel free to contact\nus via\n[github.com/opensmartenvironment](https://github.com/opensmartenvironment).\n\n## Licence\nThis software is licensed under the terms of the [GNU GPL version\n3](../LICENCE) or later\n"
        },
        {
            "displayName": "bundle.media",
            "name": "bundle.media",
            "description": "This example is an stand-alone application based on\nthe OSE framework, showcasing some of its principles and\ncapabilities. This application works as a currently half-featured\nmedia player and remote control on Linux boxes. The example\napplication has the following features:\n\n- Node.js backend\n- Control via HTML5 frontend instances\n- Near-realtime synchronization among all front- and backend\n  instances\n- Keyboard and pointer remote control using xdotool\n- Playback of different media using VLC\n- Predefined media streams\n- Icecast directory search and playback\n<!--- - DVB sources -->\n- Youtube search and playback\n- Local files playback\n- Playback from history\n<!--- - IR remote control using LIRC -->\n\nOther example applications consisting of multiple instances working\nas a single whole are coming.\n\n## Prerequisites\n\nThe main prerequisite is a working installation of a recent\ninstallation of\n[Node.js](https://github.com/joyent/node/wiki/installing-node.js-via-package-manager)\n(>= 0.10).\n\nOn Debian Jessie, you can install the default package:\n\n    sudo apt-get install nodejs\n\nOn Raspbian, install Node.js by doing:\n    wget http://node-arm.herokuapp.com/node_latest_armhf.deb\n    sudo dpkg -i node_latest_armhf.deb\n\nTo work fully, the example depends on:\n\n- PulseAudio configured with the D-Bus control interface\n- Python 3\n- The libdbus-1-dev package or its equivalent for your distribution\n- VLC\n<!--- - dvblast -->\n<!--- - LIRC -->\n\nIf you run Debian Jessie, just run:\n\n    sudo apt-get install pulseaudio python3 libdbus-1-dev vlc <!--- dvblast lirc -->\n\n\nTo enable the dbus control interface, do:\n\n    pactl load-module module-dbus-protocol\n\n\n## Installation\n\nThe easiest way of getting a working OSE installation is to install\nthe {{#crossLinkModule \"bundle\"}}ose-bundle{{/crossLinkModule}} package:\n\nFrom shell at your home directory run:\n\n    npm install ose-bundle\n\n\n\"ose-bundle\" package contains all official ose packages as its dependencies.\n\n\n## Getting it to run\n\nTo start the example OSE application, change to the installation\ndirectory and execute the startup script from an X.Org session. To\nrun the example from outside an X.Org session (in a console or\nthrough ssh), export the display variable in the shell:\n\n    export DISPLAY=\":0.0\"\n\nTo start an application from shell:\n\n    cd node_modules/ose-bundle/examples/media\n    ./run.js\n\nTo access the {{#crossLinkModule \"bb\"}}HTML5 frontend{{/crossLinkModule}}, open the following URL in {{#crossLinkModule \"ose\"}}supported browser{{/crossLinkModule}}.\n\n    http://localhost:4430\n\n\nConfiguration\n\nAll configuration files are self-explanatory or documented in the code.\n\n- The startup script is stored in `run.js`.\n- The basic configuration is stored in `config.js`.\n- To configure predefined media streams, edit `streams.js`.\n<!--- - To configure DVB sources, edit `dvb.js`. -->\n<!--- - To configure IR remote behaviour, edit `lirc.js`. -->\n\n## Modules\nMedia player example application consists of the following modules:\n- Media player example configuration\n- Startup script\n\n### Media player example configuration\nOSE is configured by an configuration object, `module.exports` in this case. Each property of this\nobject defines the configuration for one {{#crossLinkModule \"ose.plugin\"}}OSE plugin{{/crossLinkModule}}.\n\nModule {{#crossLink \"bundle.examples.media.config\"}}Media player example configuration{{/crossLink}} reference ... \n\n### Startup script\nThis scripts starts OSE instance with configuration from config file.\n\nModule {{#crossLink \"bundle.example.media\"}}Startup script{{/crossLink}} reference ... \n"
        },
        {
            "displayName": "control",
            "name": "control",
            "description": "This package contains definitions of general {{#crossLink \"ose.lib.kind\"}}kinds of entries{{/crossLink}}\nthat represent real objects found in most environments (lights,\nswitches, heaters, sensors etc.). Entries are configured by\ndefining `entry.data` values. Communication between or among\nentries is realized via {{#crossLinkModule \"ose.link\"}}links{{/crossLinkModule}}.\n\n## Status\n- Pre-alpha stage (insecure and buggy)\n- Unstable API\n- Gaps in the documentation\n- No test suite\n\nThis is not yet a piece of download-and-use software. Its important\nto understand the basic principles covered by this documentation.\n\nUse of this software is currently recommended only for users that\nwish participate in the development process (see Contributions).\n\nTODO: Make contribution a link\n\n## Getting started\nTo get started with OSE, refer to the {{#crossLinkModule \"bundle\"}}ose-bundle{{/crossLinkModule}} package and\n{{#crossLinkModule \"bundle.media\"}}Media player example application{{/crossLinkModule}}.\n\n## Components\nOpen Smart Environment Control package consists of the following components:\n- Power distributors\n- Pins\n- Rooms\n- Remote control\n\n### Power distributors\nThis component defines basic power distributor entry kinds. By\nconfiguring entries of these kinds, it is possible to define the\npower distributor configuration and behaviour.\n\nRead more about {{#crossLinkModule \"control.distributor\"}}Power distributors{{/crossLinkModule}} ...\n\n\n### Pins\nThis component allows to simply define an {{#crossLink \"ose.lib.kind\"}}entry kind{{/crossLink}} describing\nsome type of controller with individual physical or logical\npins, such as a {{#crossLinkModule \"rpi\"}}Raspberry Pi{{/crossLinkModule}} with its GPIO pins.\n\nEach entry of a kind using this component can establish {{#crossLinkModule \"ose.link\"}}links{{/crossLinkModule}} to\nindividual pins. An example {{#crossLink \"ose.lib.kind\"}}entry kind{{/crossLink}} that establishes a link to a\ncontroller switching some physical pin is the {{#crossLink \"control.lib.heater\"}}heater{{/crossLink}}.\n\nCommunication between a client and a controller consists of the\nfollowing steps:\n\n1. Define a {{#crossLinkModule \"ose.link\"}}client socket{{/crossLinkModule}} class with `update()` handler.\n2. Send `registerPin` {{#crossLinkModule \"ose.data\"}}command{{/crossLinkModule}} with request containing {{#crossLink \"control.lib.pin/index\"}}pin\n   index{{/crossLink}}, {{#crossLink \"control.lib.pin/type\"}}pin type{{/crossLink}}, optional configuration data and a client\n   socket instance.\n3. On the controller side, a new response socket is created and\n   registered by a controllers entry {{#crossLink \"control.lib.pin.list\"}}pin list{{/crossLink}}, and the {{#crossLinkModule \"ose.link\"}}link{{/crossLinkModule}} is\n   established.\n4. On the client side, the `open()` client socket handler is\n   invoked.\n\nNow it is possible to send `read()` or `update()` requests from the\nclient side to read or change the physical or logical pin state of\nthe controller. The response socket calls the client's `update()`\nhandler when a pin value change is detected. Each pin can register\nonly one active {{#crossLinkModule \"ose.link\"}}link{{/crossLinkModule}} at a time.\n\nTo create new entry kind describing some type of controller, follow\nthese steps:\n\n1. Define a new {{#crossLink \"ose.lib.kind\"}}entry kind{{/crossLink}}.\n2. Define the `read()`, `write()` and `setup()` methods for each\n   pin type of the controller.\n3. Define list of pins describing which pin can be of which type.\n4. Create {{#crossLink \"control.lib.pin.list\"}}pin list{{/crossLink}} instance for each entry in `homeInit()` method\n   of such kind.\n\nThis can be used to easily integrate, for example, Arduino boards\nor other controllers into the OSE ecosystem. If someone wants to\nput his effort into this challenge, don't hesitate to contact us\nvia GitHub for support.\n\nRead more about {{#crossLinkModule \"control.pin\"}}Pins{{/crossLinkModule}} ...\n\n\n### Rooms\nThis component defines basic room entry kinds. By configuring\nentries of these kinds, it is possible to define an indoor\nenvironment and its behaviour.\n\nRead more about {{#crossLinkModule \"control.room\"}}Rooms{{/crossLinkModule}} ...\n\n\n### Remote control\nThis component makes it possible to specify what individual remote\ncontroller commands do with OSE entries. An example of using this\ncomponent is the {{#crossLinkModule \"lirc\"}}ose-lirc{{/crossLinkModule}} package.\n\nThe remote controller can be easily configured to control\nmultimedia, lights, etc. It is possible to define commands and\ngroups of commands.\n\nExample:\nTODO\n\nRead more about {{#crossLinkModule \"control.remote\"}}Remote control{{/crossLinkModule}} ...\n\n\n## Modules\nOpen Smart Environment Control package consists of the following modules:\n- OSE Control core\n- OSE Control content\n\n### OSE Control core\nCore singleton of ose-control npm package. Register {{#crossLink \"ose.lib.kind\"}}entry kinds{{/crossLink}}\ndefined by this package to the `\"control\"` {{#crossLink \"ose.lib.scope\"}}scope{{/crossLink}}.\n\nModule {{#crossLink \"control.lib\"}}OSE Control core{{/crossLink}} reference ... \n\n### OSE Control content\nProvides files of OSE Control package to the browser.\n\nModule {{#crossLink \"control.content\"}}OSE Control content{{/crossLink}} reference ... \n\n## Contributions\nTo get started contributing or coding, it is good to read about the\ntwo main npm packages {{#crossLinkModule \"ose\"}}ose{{/crossLinkModule}} and {{#crossLinkModule \"bb\"}}ose-bb{{/crossLinkModule}}.\n\nThis software is in the pre-alpha stage. At the moment, it is\npremature to file bugs. Input is, however, much welcome in the form\nof ideas, comments and general suggestions.  Feel free to contact\nus via\n[github.com/opensmartenvironment](https://github.com/opensmartenvironment).\n\n## Licence\nThis software is licensed under the terms of the [GNU GPL version\n3](../LICENCE) or later\n"
        },
        {
            "displayName": "control.distributor",
            "name": "control.distributor",
            "description": "This component defines basic power distributor entry kinds. By\nconfiguring entries of these kinds, it is possible to define the\npower distributor configuration and behaviour.\n\n## Modules\nPower distributors consists of the following modules:\n- Digital input pin kind\n- Power distributor kind\n- Flow meter kind\n\n### Digital input pin kind\nKind defining digital input entries\n\nThe `din` entry connects to the controller by sending a\n`registerPin()` command with a client socket. The state of the\n`din` entry then changes with the state of the physical pin on the\ncontroller side.\n\nModule {{#crossLink \"control.lib.din\"}}Digital input pin kind{{/crossLink}} reference ... \n\n### Power distributor kind\n{{#crossLink \"ose.lib.kind\"}}Entry kind{{/crossLink}} defining power behaviour of distributors.\n\nModule {{#crossLink \"control.lib.distributor\"}}Power distributor kind{{/crossLink}} reference ... \n\n### Flow meter kind\nKind defining flow meters of liquids or gasses.\n\nEach entry of this kind established a new {{#crossLinkModule \"ose.link\"}}link{{/crossLinkModule}} to the master by\nsending a `registerPin()` command with `type: \"din\"`, `flavour:\n\"counter\"` and a client socket. The `state.value` of the entry then\nincrements with each master pin change. State changes are debounced\nusing the `state.debounce` value.\n\nModule {{#crossLink \"control.lib.flowMeter\"}}Flow meter kind{{/crossLink}} reference ... \n"
        },
        {
            "displayName": "control.pin",
            "name": "control.pin",
            "description": "This component allows to simply define an {{#crossLink \"ose.lib.kind\"}}entry kind{{/crossLink}} describing\nsome type of controller with individual physical or logical\npins, such as a {{#crossLinkModule \"rpi\"}}Raspberry Pi{{/crossLinkModule}} with its GPIO pins.\n\nEach entry of a kind using this component can establish {{#crossLinkModule \"ose.link\"}}links{{/crossLinkModule}} to\nindividual pins. An example {{#crossLink \"ose.lib.kind\"}}entry kind{{/crossLink}} that establishes a link to a\ncontroller switching some physical pin is the {{#crossLink \"control.lib.heater\"}}heater{{/crossLink}}.\n\nCommunication between a client and a controller consists of the\nfollowing steps:\n\n1. Define a {{#crossLinkModule \"ose.link\"}}client socket{{/crossLinkModule}} class with `update()` handler.\n2. Send `registerPin` {{#crossLinkModule \"ose.data\"}}command{{/crossLinkModule}} with request containing {{#crossLink \"control.lib.pin/index\"}}pin\n   index{{/crossLink}}, {{#crossLink \"control.lib.pin/type\"}}pin type{{/crossLink}}, optional configuration data and a client\n   socket instance.\n3. On the controller side, a new response socket is created and\n   registered by a controllers entry {{#crossLink \"control.lib.pin.list\"}}pin list{{/crossLink}}, and the {{#crossLinkModule \"ose.link\"}}link{{/crossLinkModule}} is\n   established.\n4. On the client side, the `open()` client socket handler is\n   invoked.\n\nNow it is possible to send `read()` or `update()` requests from the\nclient side to read or change the physical or logical pin state of\nthe controller. The response socket calls the client's `update()`\nhandler when a pin value change is detected. Each pin can register\nonly one active {{#crossLinkModule \"ose.link\"}}link{{/crossLinkModule}} at a time.\n\nTo create new entry kind describing some type of controller, follow\nthese steps:\n\n1. Define a new {{#crossLink \"ose.lib.kind\"}}entry kind{{/crossLink}}.\n2. Define the `read()`, `write()` and `setup()` methods for each\n   pin type of the controller.\n3. Define list of pins describing which pin can be of which type.\n4. Create {{#crossLink \"control.lib.pin.list\"}}pin list{{/crossLink}} instance for each entry in `homeInit()` method\n   of such kind.\n\nThis can be used to easily integrate, for example, Arduino boards\nor other controllers into the OSE ecosystem. If someone wants to\nput his effort into this challenge, don't hesitate to contact us\nvia GitHub for support.\n\n## Pin types\n\nEvery pin has assigned a pin type, defined by the controller. Type\ndefines the `read()` and `write()` methods to read or update the\nvalue of a physical pin on the controller. Pin type can have the\n`setup()` method that is called during the pin is registered.\n\nThe Raspberry PI entry kind, for example, defines the `din` and\n`dout` pin types. Both these types have the `setup()` method that\nsets up a Gpio class instance from the\n[onoff](https://www.npmjs.org/package/onoff) npm package for each\nregistered pin to read or write the pin's value.\n\nThere are following pre-defined pin types:\n- Digital input\n- Digital output\n- PWM\n\n## Flavours\n\nCommunication between a pin and a client can be changed using {{#crossLink \"control.lib.pin/flavour\"}}pin\nflavours{{/crossLink}}.  At registration time, the client can send a flavour\nvalue with the `registerPin` request command.\n\nThere are following predefined pin flavours:\n- Counter\n- Light\n- Switch\n\nExamples are a {{#crossLink \"control.lib.switch\"}}switch entry{{/crossLink}} that registers to the master's pin\nwith `flavour: 'switch'` or a {{#crossLink \"control.lib.light\"}}light entry{{/crossLink}} that registers each\nchannel with `flavour: 'light'`.\n\n## Modules\nPins consists of the following modules:\n- Digital input-to-controller pin client socket\n- Pin list commands\n- Counter pin flavour\n- Digital input pin type\n- Digital output pin type\n- Pin response socket\n- Light pin flavour\n- Pin List\n- PWM pin type\n- Switch pin flavour\n\n### Digital input-to-controller pin client socket\nClient socket connecting to a physical device pin. Updates digital\ninput entry state.\n\nModule {{#crossLink \"control.lib.din.pin\"}}Digital input-to-controller pin client socket{{/crossLink}} reference ... \n\n### Pin list commands\nCommands that are registered on {{#crossLink \"ose.lib.kind\"}}entry kinds{{/crossLink}} creating a list of\npins for their {{#crossLink \"ose.lib.entry\"}}entries{{/crossLink}}.\n\nModule {{#crossLink \"control.lib.pin.commands\"}}Pin list commands{{/crossLink}} reference ... \n\n### Counter pin flavour\nSetup of a digital input pin acting as a counter. When a pin\nchanges its value to 1, the counter increments. `link.update()` is\nsent throttled by a timeout defined in the request or the default\ntimeout of 1 second.\n\nThis pin flavour can be used, for example, by a gas or liquid flow\nmeter.\n\nModule {{#crossLink \"control.lib.pin.counter\"}}Counter pin flavour{{/crossLink}} reference ... \n\n### Digital input pin type\nSetup of digital input pin.\n\nModule {{#crossLink \"control.lib.pin.din\"}}Digital input pin type{{/crossLink}} reference ... \n\n### Digital output pin type\nSetup of digital output pin.\n\nModule {{#crossLink \"control.lib.pin.dout\"}}Digital output pin type{{/crossLink}} reference ... \n\n### Pin response socket\nResponse socket representing one pin that handles the communication\nwith a client.\n\nModule {{#crossLink \"control.lib.pin\"}}Pin response socket{{/crossLink}} reference ... \n\n### Light pin flavour\nFlavour controlling pins to which one light channel is connected as\na slave. This flavour allows smooth light dimming.\n\nModule {{#crossLink \"control.lib.pin.light\"}}Light pin flavour{{/crossLink}} reference ... \n\n### Pin List\nList of pins registered to the owning entry.\n\nModule {{#crossLink \"control.lib.pin.list\"}}Pin List{{/crossLink}} reference ... \n\n### PWM pin type\nPWM pin type\n\nModule {{#crossLink \"control.lib.pin.pwm\"}}PWM pin type{{/crossLink}} reference ... \n\n### Switch pin flavour\nProcesses pin changes and calls `link.press()`, `link.release()`,\n`link.tap(count)` or `link.hold()` instead of `link.update()`.\n\nModule {{#crossLink \"control.lib.pin.switch\"}}Switch pin flavour{{/crossLink}} reference ... \n"
        },
        {
            "displayName": "control.remote",
            "name": "control.remote",
            "description": "This component makes it possible to specify what individual remote\ncontroller commands do with OSE entries. An example of using this\ncomponent is the {{#crossLinkModule \"lirc\"}}ose-lirc{{/crossLinkModule}} package.\n\nThe remote controller can be easily configured to control\nmultimedia, lights, etc. It is possible to define commands and\ngroups of commands.\n\nExample:\nTODO\n\n## Modules\nRemote control consists of the following modules:\n- Remote controller command group class for lights\n- Remote control module\n\n### Remote controller command group class for lights\nFacilitates configuration of controlling lights with remote\ncontrollers.\n\nModule {{#crossLink \"control.lib.light.remote\"}}Remote controller command group class for lights{{/crossLink}} reference ... \n\n### Remote control module\nMethods allowing the setup of remote controller\n\nModule {{#crossLink \"control.lib.remote\"}}Remote control module{{/crossLink}} reference ... \n"
        },
        {
            "displayName": "control.room",
            "name": "control.room",
            "description": "This component defines basic room entry kinds. By configuring\nentries of these kinds, it is possible to define an indoor\nenvironment and its behaviour.\n\n## Modules\nRooms consists of the following modules:\n- Door kind\n- Door-to-controller pin client socket\n- Heater kind\n- Heater-to-controller pin client socket\n- Heater-to-tariff client socket\n- Light kind\n- Light chanell-to-controller pin client socket\n- Light-to-switch client socket\n- Room kind\n- Switch kind\n- Switch-to-controller client socket\n- Switch relay response socket\n- Activity class\n\n### Door kind\nEach {{#crossLink \"ose.lib.entry\"}}entry{{/crossLink}} of this kind establishes a {{#crossLinkModule \"ose.link\"}}link{{/crossLinkModule}} to the `data.master`\ncontroller entry with `type: \"din\"`. Entry state is changed\ndepending on the incoming data, and the `open` or `close` events\nare fired. These events can be listened for, and appropriate\nactions can be taken.\n\nModule {{#crossLink \"control.lib.door\"}}Door kind{{/crossLink}} reference ... \n\n### Door-to-controller pin client socket\nEstablishes a link to the `data.master` controller pin `data.pin`\nwith `type: \"din\"`. The controller can be a {{#crossLinkModule \"rpi\"}}Raspberry Pi{{/crossLinkModule}} or {{#crossLinkModule \"boards\"}}OSE\nMain board{{/crossLinkModule}}, for example.\n\nModule {{#crossLink \"control.lib.door.pin\"}}Door-to-controller pin client socket{{/crossLink}} reference ... \n\n### Heater kind\n{{#crossLink \"ose.lib.kind\"}}Entry kind{{/crossLink}} defining behaviour of heaters. Each heater establishes\na {{#crossLinkModule \"ose.link\"}}link{{/crossLinkModule}} to the `data.master` entry with a `registerPin()`\n{{#crossLinkModule \"ose.data\"}}command{{/crossLinkModule}} and to an optional `data.tariff` entry to watch low and\nhigh tariff switching.\n\nModule {{#crossLink \"control.lib.heater\"}}Heater kind{{/crossLink}} reference ... \n\n### Heater-to-controller pin client socket\nEstablishes a {{#crossLinkModule \"ose.link\"}}link{{/crossLinkModule}} to the `data.master` {{#crossLink \"control.lib.pin\"}}controller pin{{/crossLink}}\n`data.pin` with `type: \"dout\"`. The master can be a {{#crossLinkModule \"rpi\"}}Raspberry Pi{{/crossLinkModule}}\nor {{#crossLinkModule \"boards\"}}OSE Main board{{/crossLinkModule}}, for example.\n\nModule {{#crossLink \"control.lib.heater.pin\"}}Heater-to-controller pin client socket{{/crossLink}} reference ... \n\n### Heater-to-tariff client socket\nEstablishes a link to the `data.tariff` entry.\n\nModule {{#crossLink \"control.lib.heater.tariff\"}}Heater-to-tariff client socket{{/crossLink}} reference ... \n\n### Light kind\n{{#crossLink \"ose.lib.kind\"}}Entry kind{{/crossLink}} defining behaviour of lights. Each light consists of\nchannels. Each channel is controlled by some `master`\ncontroller. It is possible to use dimming when the controller\nsupports it. This component allows to easily create lights composed\nof LED strips that can smoothly change the colour and intensity,\nand do any other effects.\n\nSmooth changes of light intensity can be controlled through the\n`speed` value, which defines the time in milliseconds it takes\nchange the light intensity from 0 to 100% or vice versa.\n\nEach light supports auto-off timeout since last change with\nconfigurable dim speed.\n\nEvery light can be controlled by a {{#crossLink \"control.lib.switch\"}}switch entry{{/crossLink}} with the\nfollowing behaviour:\n- One tap when shining: Switch the light off.\n- One tap when off: Switch to the default configurable value.\n- Two taps: Switch the light fully on.\n- Hold: Switch the light off.\n\nModule {{#crossLink \"control.lib.light\"}}Light kind{{/crossLink}} reference ... \n\n### Light chanell-to-controller pin client socket\nEstablishes a link for a channel to the `data.master`\ncontroller. The controller can be an {{#crossLinkModule \"boards\"}}OSE PWM board{{/crossLinkModule}}, for example.\n\nModule {{#crossLink \"control.lib.light.pin\"}}Light chanell-to-controller pin client socket{{/crossLink}} reference ... \n\n### Light-to-switch client socket\nEstablishes a link to a {{#crossLink \"control.lib.switch\"}}switch{{/crossLink}} controlling behaviour of a light.\n\nModule {{#crossLink \"control.lib.light.switch\"}}Light-to-switch client socket{{/crossLink}} reference ... \n\n### Room kind\n{{#crossLink \"ose.lib.kind\"}}Entry kind{{/crossLink}} defining behaviour of rooms.\n\nVarious activities can be defined for each room. Activities govern\nthe behaviour of rooms. When an activity is selected, it sends\ncommands to entries and trigger scheduled actions.\n\nEach activity is identified by its name and can be selected by a\ncommand sent to the room entry. Each activity should be a\ndescendant of the {{#crossLink \"control.lib.activity\"}}activity class{{/crossLink}}.\n\nExample:\n\nThe living room may have the following activities defined:\n\n- watching TV (lights dimmed, TV on, blinds down if dark outside,\n    etc.)\n- tidying (lights fully on, radio on)\n- reading (lights half on, multimedia off)\n\nAnother example:\n\nThe house may have the following activities:\n- at home (full comfort)\n- empty house (detection of intruders, heating down, etc.)\n- vacation (random actions simulating the presence of inhabitants)\n\nModule {{#crossLink \"control.lib.room\"}}Room kind{{/crossLink}} reference ... \n\n### Switch kind\nEach switch is a digital input that has two logical values: `0` or `1`.\n\nEach {{#crossLink \"ose.lib.entry\"}}entry{{/crossLink}} of this kind establishes a {{#crossLinkModule \"ose.link\"}}link{{/crossLinkModule}} to the `data.master`\ncontroller entry with `flavour: \"switch\"`.\n\n`press`, `release`, `tap` and `hold` events are fired on the entry,\nand the state of the entry is updated depending on controller pin\nchanges. These events can be listened for, and appropriate actions\ncan be taken.\n\nIt is also possible to establish a new {{#crossLinkModule \"ose.link\"}}link{{/crossLinkModule}} to a switch as a\nslave with the `relay(req, slave)` command. The events listed above\nare then relayed to the `slave` socket.\n\nFor example, a {{#crossLink \"control.lib.light\"}}light entry{{/crossLink}} connects to a switch (if defined in\n`light.data.switch`) as a slave and is turned on or off depending\non pressing the switch.\n\nModule {{#crossLink \"control.lib.switch\"}}Switch kind{{/crossLink}} reference ... \n\n### Switch-to-controller client socket\nEstablishes a link to the `data.master` controller. The controller\ncan be a {{#crossLinkModule \"rpi\"}}Raspberry Pi{{/crossLinkModule}} or {{#crossLinkModule \"boards\"}}OSE Main board{{/crossLinkModule}}, for example.\n\nModule {{#crossLink \"control.lib.switch.socket\"}}Switch-to-controller client socket{{/crossLink}} reference ... \n\n### Switch relay response socket\n{{#crossLinkModule \"ose.link\"}}Response socket{{/crossLinkModule}} relaying the switch entry events to the slave.\n\nModule {{#crossLink \"control.lib.switch.relay\"}}Switch relay response socket{{/crossLink}} reference ... \n\n### Activity class\nAncestor for activity definintions\n\nModule {{#crossLink \"control.lib.activity\"}}Activity class{{/crossLink}} reference ... \n"
        },
        {
            "displayName": "dvb",
            "name": "dvb",
            "description": "This package contains the general definition of DVB-related logic.\nCurrently it contains only the channel {{#crossLink \"ose.lib.kind\"}}entry kind{{/crossLink}} and registers\nDVB as a source to the {{#crossLinkModule \"media\"}}OSE Media player{{/crossLinkModule}}.\n\nDVB channels are configured in .js files.\n\nExample:\n\nTODO\n\n## Status\n- Pre-alpha stage (insecure and buggy)\n- Unstable API\n- Gaps in the documentation\n- No test suite\n\nThis is not yet a piece of download-and-use software. Its important\nto understand the basic principles covered by this documentation.\n\nUse of this software is currently recommended only for users that\nwish participate in the development process (see Contributions).\n\nTODO: Make contribution a link\n\n## Getting started\nTo get started with OSE, refer to the {{#crossLinkModule \"bundle\"}}ose-bundle{{/crossLinkModule}} package and\n{{#crossLinkModule \"bundle.media\"}}Media player example application{{/crossLinkModule}}.\n\n## Modules\nOpen Smart Environment DVB package consists of the following modules:\n- DVB channel kind\n- OSE DVB core\n- OSE DVB content\n\n### DVB channel kind\n{{#crossLink \"ose.lib.kind\"}}Entry kind{{/crossLink}} describing DVB channels.\n\nModule {{#crossLink \"dvb.lib.channel\"}}DVB channel kind{{/crossLink}} reference ... \n\n### OSE DVB core\nCore singleton of ose-dvb npm package. Registers {{#crossLink \"ose.lib.kind\"}}entry kinds{{/crossLink}}\ndefined by this package to the `\"media\"` {{#crossLink \"ose.lib.scope\"}}scope{{/crossLink}}.\n\nModule {{#crossLink \"dvb.lib\"}}OSE DVB core{{/crossLink}} reference ... \n\n### OSE DVB content\nProvides files of OSE DVB package to the browser.\n\nModule {{#crossLink \"dvb.content\"}}OSE DVB content{{/crossLink}} reference ... \n\n## Contributions\nTo get started contributing or coding, it is good to read about the\ntwo main npm packages {{#crossLinkModule \"ose\"}}ose{{/crossLinkModule}} and {{#crossLinkModule \"bb\"}}ose-bb{{/crossLinkModule}}.\n\nThis software is in the pre-alpha stage. At the moment, it is\npremature to file bugs. Input is, however, much welcome in the form\nof ideas, comments and general suggestions.  Feel free to contact\nus via\n[github.com/opensmartenvironment](https://github.com/opensmartenvironment).\n\n## Licence\nThis software is licensed under the terms of the [GNU GPL version\n3](../LICENCE) or later\n"
        },
        {
            "displayName": "fs",
            "name": "fs",
            "description": "This package contains definitions of {{#crossLink \"ose.lib.kind\"}}entry kinds{{/crossLink}} that represent\nfiles and directories and gives OSE access to the filesystem and\nregisters DVB as a source to the {{#crossLinkModule \"media\"}}OSE Media player{{/crossLinkModule}}.\n\n## Status\n- Pre-alpha stage (insecure and buggy)\n- Unstable API\n- Gaps in the documentation\n- No test suite\n\nThis is not yet a piece of download-and-use software. Its important\nto understand the basic principles covered by this documentation.\n\nUse of this software is currently recommended only for users that\nwish participate in the development process (see Contributions).\n\nTODO: Make contribution a link\n\n## Getting started\nTo get started with OSE, refer to the {{#crossLinkModule \"bundle\"}}ose-bundle{{/crossLinkModule}} package and\n{{#crossLinkModule \"bundle.media\"}}Media player example application{{/crossLinkModule}}.\n\n## Modules\nOpen Smart Environment Filesystem package consists of the following modules:\n- Dir kind\n- File kind\n- OSE Filesystem core\n- OSE Filesystem content\n\n### Dir kind\n{{#crossLink \"ose.lib.kind\"}}Entry kind{{/crossLink}} describing directories.\n\nModule {{#crossLink \"fs.lib.dir\"}}Dir kind{{/crossLink}} reference ... \n\n### File kind\n{{#crossLink \"ose.lib.kind\"}}Entry kind{{/crossLink}} describing files.\n\nModule {{#crossLink \"fs.lib.file\"}}File kind{{/crossLink}} reference ... \n\n### OSE Filesystem core\nCore singleton of ose-fs npm package. Registers {{#crossLink \"ose.lib.kind\"}}entry kinds{{/crossLink}}\ndefined by this package to the `\"fs\"` {{#crossLink \"ose.lib.scope\"}}scope{{/crossLink}}.\n\nModule {{#crossLink \"fs.lib\"}}OSE Filesystem core{{/crossLink}} reference ... \n\n### OSE Filesystem content\nProvides files of OSE Filesystem package to the browser.\n\nModule {{#crossLink \"fs.content\"}}OSE Filesystem content{{/crossLink}} reference ... \n\n## Contributions\nTo get started contributing or coding, it is good to read about the\ntwo main npm packages {{#crossLinkModule \"ose\"}}ose{{/crossLinkModule}} and {{#crossLinkModule \"bb\"}}ose-bb{{/crossLinkModule}}.\n\nThis software is in the pre-alpha stage. At the moment, it is\npremature to file bugs. Input is, however, much welcome in the form\nof ideas, comments and general suggestions.  Feel free to contact\nus via\n[github.com/opensmartenvironment](https://github.com/opensmartenvironment).\n\n## Licence\nThis software is licensed under the terms of the [GNU GPL version\n3](../LICENCE) or later\n"
        },
        {
            "displayName": "icecast",
            "name": "icecast",
            "description": "This package makes it possible to search for Icecast streams in the\nIcecast directory (http://dir.xiph.org)\n\nIt defines the icecast stream {{#crossLink \"ose.lib.kind\"}}entry kind{{/crossLink}} and registers it as a\nsource to {{#crossLinkModule \"media\"}}OSE Media player{{/crossLinkModule}}.\n\n## Status\n- Pre-alpha stage (insecure and buggy)\n- Unstable API\n- Gaps in the documentation\n- No test suite\n\nThis is not yet a piece of download-and-use software. Its important\nto understand the basic principles covered by this documentation.\n\nUse of this software is currently recommended only for users that\nwish participate in the development process (see Contributions).\n\nTODO: Make contribution a link\n\n## Getting started\nTo get started with OSE, refer to the {{#crossLinkModule \"bundle\"}}ose-bundle{{/crossLinkModule}} package and\n{{#crossLinkModule \"bundle.media\"}}Media player example application{{/crossLinkModule}}.\n\n## Modules\nOpen Smart Environment Icecast package consists of the following modules:\n- Icecast stream kind\n- OSE Icecast core\n- OSE Icecast content\n\n### Icecast stream kind\n{{#crossLink \"ose.lib.kind\"}}Entry kind{{/crossLink}} describing Icecast streams.\n\nModule {{#crossLink \"icecast.lib.stream\"}}Icecast stream kind{{/crossLink}} reference ... \n\n### OSE Icecast core\nCore singleton of ose-icecast npm package. Registers {{#crossLink \"ose.lib.kind\"}}entry kinds{{/crossLink}}\ndefined by this package to the `\"icecast\"` {{#crossLink \"ose.lib.scope\"}}scope{{/crossLink}}.\n\nModule {{#crossLink \"icecast.lib\"}}OSE Icecast core{{/crossLink}} reference ... \n\n### OSE Icecast content\nProvides files of OSE Icecast package to the browser.\n\nModule {{#crossLink \"icecast.content\"}}OSE Icecast content{{/crossLink}} reference ... \n\n## Contributions\nTo get started contributing or coding, it is good to read about the\ntwo main npm packages {{#crossLinkModule \"ose\"}}ose{{/crossLinkModule}} and {{#crossLinkModule \"bb\"}}ose-bb{{/crossLinkModule}}.\n\nThis software is in the pre-alpha stage. At the moment, it is\npremature to file bugs. Input is, however, much welcome in the form\nof ideas, comments and general suggestions.  Feel free to contact\nus via\n[github.com/opensmartenvironment](https://github.com/opensmartenvironment).\n\n## Licence\nThis software is licensed under the terms of the [GNU GPL version\n3](../LICENCE) or later\n"
        },
        {
            "displayName": "lirc",
            "name": "lirc",
            "description": "This package allows to use LIRC in OSE. It is thus possible to\nmanage your environment using IR remote controllers.\n\nIt forwards received commands to the {{#crossLinkModule \"control.remote\"}}control.remote{{/crossLinkModule}} component.\n\n## Status\n- Pre-alpha stage (insecure and buggy)\n- Unstable API\n- Gaps in the documentation\n- No test suite\n\nThis is not yet a piece of download-and-use software. Its important\nto understand the basic principles covered by this documentation.\n\nUse of this software is currently recommended only for users that\nwish participate in the development process (see Contributions).\n\nTODO: Make contribution a link\n\n## Getting started\nTo get started with OSE, refer to the {{#crossLinkModule \"bundle\"}}ose-bundle{{/crossLinkModule}} package and\n{{#crossLinkModule \"bundle.media\"}}Media player example application{{/crossLinkModule}}.\n\n## Modules\nOpen Smart Environment LIRC package consists of the following modules:\n- LIRC kind\n- OSE LIRC core\n- OSE LIRC content\n\n### LIRC kind\nEntry kind for connecting to and communicating with the LIRC\ndaemon.\n\nUses {{#crossLinkModule \"control.remote\"}}control.remote{{/crossLinkModule}} component.\n\nModule {{#crossLink \"lirc.lib.lirc\"}}LIRC kind{{/crossLink}} reference ... \n\n### OSE LIRC core\nCore singleton of ose-lirc npm package. Register {{#crossLink \"ose.lib.kind\"}}entry kinds{{/crossLink}}\ndefined by this package to the `\"control\"` {{#crossLink \"ose.lib.scope\"}}scope{{/crossLink}}.\n\nModule {{#crossLink \"lirc.lib\"}}OSE LIRC core{{/crossLink}} reference ... \n\n### OSE LIRC content\nProvides files of OSE LIRC package to the browser.\n\nModule {{#crossLink \"lirc.content\"}}OSE LIRC content{{/crossLink}} reference ... \n\n## Contributions\nTo get started contributing or coding, it is good to read about the\ntwo main npm packages {{#crossLinkModule \"ose\"}}ose{{/crossLinkModule}} and {{#crossLinkModule \"bb\"}}ose-bb{{/crossLinkModule}}.\n\nThis software is in the pre-alpha stage. At the moment, it is\npremature to file bugs. Input is, however, much welcome in the form\nof ideas, comments and general suggestions.  Feel free to contact\nus via\n[github.com/opensmartenvironment](https://github.com/opensmartenvironment).\n\n## Licence\nThis software is licensed under the terms of the [GNU GPL version\n3](../LICENCE) or later\n"
        },
        {
            "displayName": "media",
            "name": "media",
            "description": "The OSE Media package implements a general media player into your\nenvironment. It makes use of various media applications. The logic\nof controlling these applications is contained in separate packages\n({{#crossLinkModule \"pa\"}}ose-pa{{/crossLinkModule}}, {{#crossLinkModule \"videolan\"}}ose-videolan{{/crossLinkModule}}).\n\n## Features\n- Media sources extended by other npm packages\n- Predefined media streams, files and playback history\n- Media playback using a configurable set of applications\n  (currently DVBlast as DVB stramer, PulseAudio as audio backend\n  and VLC as media player)\n\n## Status\n- Pre-alpha stage (insecure and buggy)\n- Unstable API\n- Gaps in the documentation\n- No test suite\n\nThis is not yet a piece of download-and-use software. Its important\nto understand the basic principles covered by this documentation.\n\nUse of this software is currently recommended only for users that\nwish participate in the development process (see Contributions).\n\nTODO: Make contribution a link\n\n## Getting started\nTo get started with OSE, refer to the {{#crossLinkModule \"bundle\"}}ose-bundle{{/crossLinkModule}} package and\n{{#crossLinkModule \"bundle.media\"}}Media player example application{{/crossLinkModule}}.\n\n## Components\nOpen Smart Environment Media package consists of the following components:\n- Media history\n- Media player\n- Media streams\n- Media sources\n\n### Media history\nOSE Media package keeps track of played media items. These items\ncan be displayed in the player history and played again.\n\nRead more about {{#crossLinkModule \"media.history\"}}Media history{{/crossLinkModule}} ...\n\n\n### Media player\nThe media player {{#crossLink \"ose.lib.kind\"}}kind{{/crossLink}} contains the logic for media control. It\ncontrols the volume, playback and DVB streamer on one or more Linux\nboxes. In the {{#crossLinkModule \"bb\"}}OSE UI{{/crossLinkModule}} it displays information about currently\nplaying media and allows to control the player remotely. It's\npossible to display one of registered media sources and select an\nitem. Some sources support searching.\n\nRead more about {{#crossLinkModule \"media.player\"}}Media player{{/crossLinkModule}} ...\n\n\n### Media streams\nIt is possible to predefine favourite streams or files into the OSE\nMedia player. These can be easily selected and played.\n\nRead more about {{#crossLinkModule \"media.stream\"}}Media streams{{/crossLinkModule}} ...\n\n\n### Media sources\nEach media source is a reference to some {{#crossLink \"ose.lib.kind\"}}entry kind{{/crossLink}} describing\nsource of media items. Media player use sources to select media to\nplay. Registration to sources is done during initialization of the\nnpm package containing the source. Any OSE package can contain one\nor more media sources. Examples are the {{#crossLinkModule \"dvb\"}}DVB{{/crossLinkModule}}, {{#crossLinkModule \"icecast\"}}Icecast{{/crossLinkModule}} or\n{{#crossLinkModule \"youtube\"}}Youtube{{/crossLinkModule}} packages.\n\nRead more about {{#crossLinkModule \"media.source\"}}Media sources{{/crossLinkModule}} ...\n\n\n## Modules\nOpen Smart Environment Media package consists of the following modules:\n- OSE Media core\n- OSE Media content\n\n### OSE Media core\nCore singleton of {{#crossLinkModule \"media\"}}ose-media{{/crossLinkModule}} npm package. Registers {{#crossLink \"ose.lib.kind\"}}entry kinds{{/crossLink}}\ndefined by this package to the `media` {{#crossLink \"ose.lib.scope\"}}scope{{/crossLink}}.\n\nModule {{#crossLink \"media.lib\"}}OSE Media core{{/crossLink}} reference ... \n\n### OSE Media content\nProvides files of OSE Media package to the browser.\n\nModule {{#crossLink \"media.content\"}}OSE Media content{{/crossLink}} reference ... \n\n## Contributions\nTo get started contributing or coding, it is good to read about the\ntwo main npm packages {{#crossLinkModule \"ose\"}}ose{{/crossLinkModule}} and {{#crossLinkModule \"bb\"}}ose-bb{{/crossLinkModule}}.\n\nThis software is in the pre-alpha stage. At the moment, it is\npremature to file bugs. Input is, however, much welcome in the form\nof ideas, comments and general suggestions.  Feel free to contact\nus via\n[github.com/opensmartenvironment](https://github.com/opensmartenvironment).\n\n## Licence\nThis software is licensed under the terms of the [GNU GPL version\n3](../LICENCE) or later\n"
        },
        {
            "displayName": "media.history",
            "name": "media.history",
            "description": "OSE Media package keeps track of played media items. These items\ncan be displayed in the player history and played again.\n\n## Modules\nMedia history consists of the following modules:\n- Media item kind\n\n### Media item kind\nThe media item entry represents a single media item that can be\nplayed back. It contains a reference to another entry and\nadditional data depending on the source.\n\nModule {{#crossLink \"media.lib.item\"}}Media item kind{{/crossLink}} reference ... \n"
        },
        {
            "displayName": "media.player",
            "name": "media.player",
            "description": "The media player {{#crossLink \"ose.lib.kind\"}}kind{{/crossLink}} contains the logic for media control. It\ncontrols the volume, playback and DVB streamer on one or more Linux\nboxes. In the {{#crossLinkModule \"bb\"}}OSE UI{{/crossLinkModule}} it displays information about currently\nplaying media and allows to control the player remotely. It's\npossible to display one of registered media sources and select an\nitem. Some sources support searching.\n\n## Modules\nMedia player consists of the following modules:\n- Media player command handlers\n- Media player to dvb client socket\n- Media player kind\n- Media player-to-playback client socket\n- Media player to volume client socket\n\n### Media player command handlers\nCommand handlers for entries of media player kind\n\nModule {{#crossLink \"media.lib.player.commands\"}}Media player command handlers{{/crossLink}} reference ... \n\n### Media player to dvb client socket\nEstablishes {{#crossLinkModule \"ose.link\"}}link{{/crossLinkModule}} to a dvb entry.\n\nModule {{#crossLink \"media.lib.player.dvb\"}}Media player to dvb client socket{{/crossLink}} reference ... \n\n### Media player kind\nOn each entry initialization, {{#crossLinkModule \"ose.link\"}}links{{/crossLinkModule}} to volume control, playback\nand DVB streamer entries are established. Every entry of this kind\nhandles commands to control media playback.\n\nModule {{#crossLink \"media.lib.player\"}}Media player kind{{/crossLink}} reference ... \n\n### Media player-to-playback client socket\nEstablishes a {{#crossLinkModule \"ose.link\"}}link{{/crossLinkModule}} to a playback entry.\n\nModule {{#crossLink \"media.lib.player.playback\"}}Media player-to-playback client socket{{/crossLink}} reference ... \n\n### Media player to volume client socket\nEstablishes a {{#crossLinkModule \"ose.link\"}}link{{/crossLinkModule}} to a volume entry.\n\nModule {{#crossLink \"media.lib.player.volume\"}}Media player to volume client socket{{/crossLink}} reference ... \n"
        },
        {
            "displayName": "media.source",
            "name": "media.source",
            "description": "Each media source is a reference to some {{#crossLink \"ose.lib.kind\"}}entry kind{{/crossLink}} describing\nsource of media items. Media player use sources to select media to\nplay. Registration to sources is done during initialization of the\nnpm package containing the source. Any OSE package can contain one\nor more media sources. Examples are the {{#crossLinkModule \"dvb\"}}DVB{{/crossLinkModule}}, {{#crossLinkModule \"icecast\"}}Icecast{{/crossLinkModule}} or\n{{#crossLinkModule \"youtube\"}}Youtube{{/crossLinkModule}} packages.\n\n## Description\nMedia source kind must implement two methods:\n- `getMediaKeys()`\n- `playItem()`\n\nDescription of these methods can be found at {{#crossLink \"media.lib.stream\"}}Media stream kind{{/crossLink}}.\n\n## Modules\nMedia sources consists of the following modules:\n- Media sources singleton\n\n### Media sources singleton\nSingleton containing all media sources.\n\nModule {{#crossLink \"media.lib.sources\"}}Media sources singleton{{/crossLink}} reference ... \n"
        },
        {
            "displayName": "media.stream",
            "name": "media.stream",
            "description": "It is possible to predefine favourite streams or files into the OSE\nMedia player. These can be easily selected and played.\n\n## Modules\nMedia streams consists of the following modules:\n- Media stream kind\n\n### Media stream kind\nMedia stream entry represents a single media stream that can be\nplayed back.\n\nModule {{#crossLink \"media.lib.stream\"}}Media stream kind{{/crossLink}} reference ... \n"
        },
        {
            "displayName": "ose",
            "name": "ose",
            "description": "Lightweight and extensible framework for development and rapid\nprototyping of modern applications based on Node.js and HTML5.\n\nThe framework is created as a base for an OSE application that\nmanages the physical and virtual environment that a user lives\nin. It brings the ability to easily monitor and control the\nenvironment, and to automate tasks.\n\n## Features\n- Multi-instance architecture\n- Transparent network communication via WebSockets\n- Near real-time synchronization\n- Code sharing between Node.js and web browsers\n- Partitioned data model\n- Extensible via npm packages\n\n## Status\n- Pre-alpha stage (insecure and buggy)\n- Unstable API\n- Gaps in the documentation\n- No test suite\n\nThis is not yet a piece of download-and-use software. Its important\nto understand the basic principles covered by this documentation.\n\nUse of this software is currently recommended only for users that\nwish participate in the development process (see Contributions).\n\nTODO: Make contribution a link\n\n## Getting started\nTo get started with OSE, refer to the {{#crossLinkModule \"bundle\"}}ose-bundle{{/crossLinkModule}} package and\n{{#crossLinkModule \"bundle.media\"}}Media player example application{{/crossLinkModule}}.\n\n## Platforms\n\nWe are developing the OSE framework on the following platforms and\nbrowsers:\n- Node.js (>0.10) running on Debian Jessie and Raspbian\n- recent versions of Firefox\n- recent versions of Chromium/Chrome\n\nIt, however, probably also runs on other recent Linux\ndistributions.\n\n## Components\nOpen Smart Environment framework consists of the following components:\n- Data model\n- HTTP server\n- Peers\n- Sockets and links\n- Logging and error handling\n- Plugins\n- Classes and singletons\n\n### Data model\nThe data model of the framework is designed so that individual\ninstances of OSE hold subsets of the data and together create a\nsingle whole.\n\nData partitions are called {{#crossLink \"ose.lib.shard\"}}shards{{/crossLink}}. Basic data units contained by\n{{#crossLink \"ose.lib.shard\"}}shards{{/crossLink}} are called {{#crossLink \"ose.lib.entry\"}}entries{{/crossLink}}.\n\nEach {{#crossLink \"ose.lib.entry\"}}entry{{/crossLink}} is of a certain {{#crossLink \"ose.lib.kind\"}}kind{{/crossLink}}. {{#crossLink \"ose.lib.kind\"}}Kinds{{/crossLink}} define the properties\nand behaviour of {{#crossLink \"ose.lib.entry\"}}entries{{/crossLink}}. Kinds are namespaced using {{#crossLink \"ose.lib.scope\"}}scopes{{/crossLink}}.\n\nEach {{#crossLink \"ose.lib.shard\"}}shard{{/crossLink}} belongs to a {{#crossLink \"ose.lib.space\"}}space{{/crossLink}} that act as the shard's\nnamespace. Each shard is tied to {{#crossLink \"ose.lib.scope\"}}scope{{/crossLink}} and can contain only\nentries of kinds from that {{#crossLink \"ose.lib.scope\"}}scope{{/crossLink}}.\n\nKind hierarchy:\n* scope\n  * kind\n\nData partitioning hierarchy:\n* space\n  * shard\n    * entry\n\nExample:\n\nThe `reading.light` is an entry of the kind `light`, the `light`\nkind belongs to the `control` scope, and the `reading.light` entry\nis saved in the shard `living.room`, which belongs to the space\n`my.house`.\n\nRead more about {{#crossLinkModule \"ose.data\"}}Data model{{/crossLinkModule}} ...\n\n\n### HTTP server\nThis component provides an HTTP server for OSE. It responds to HTTP\nrequests and provides data needed to run OSE instance in the\nbrowser. Each OSE package that needs to run in the browser creates\none `ose/lib/http/content` class instance and defines which files\nwill be provided to the browser.\n\nIt also handles incoming WebSocket requests from other OSE\ninstances and relays them to the {{#crossLinkModule \"ose.peer\"}}peers component{{/crossLinkModule}}.\n\nRead more about {{#crossLinkModule \"ose.http\"}}HTTP server{{/crossLinkModule}} ...\n\n\n### Peers\nThe system, which is based on the OSE framework, consist of one or\nmore configured instances, called OSE instances. An OSE instance is\nidentified by a unique `name` an can run in Node.js or in a web\nbrowser.\n\nFrom the point of view of an OSE instance, a peer is another OSE\ninstance. Two peers can communicate with each other using the\nWebSocket protocol. Peers can be accessed directly, when a\nWebSocket channel exists, or indirectly, by using another peer as a\ngateway.\n\nThis component allows the following communication between OSE\ninstances:\n\n- Obtaining {{#crossLink \"ose.lib.entry\"}}entries{{/crossLink}} and views of entries.\n- Synchronization of {{#crossLink \"ose.lib.entry\"}}states of entries{{/crossLink}} in near real-time.\n- Sending of commands to entries.\n- Establishing transparent, asynchronous bidirectional {{#crossLinkModule \"ose.link\"}}links{{/crossLinkModule}}\n  between entries.\n\nRead more about {{#crossLinkModule \"ose.peer\"}}Peers{{/crossLinkModule}} ...\n\n\n### Sockets and links\nThe framework makes it possible to easily create links between\n`entries` to allow communication regardless of whether it is\nrealized within one OSE instance or transparently across multiple\nOSE instances. A link is a virtual bidirectional communication\nchannel between two sockets. Link cannot exist without an active\n{{#crossLinkModule \"ose.peer\"}}peer-to-peer{{/crossLinkModule}} connection channel between sockets. When some\nWebSocket channel is closed, an `error` handler is called on both\nends of links using such channel and links are closed.\n\nEach socket is an object with handlers. A socket is either a client\nsocket or a response socket. To establish a link, a client socket\nmust first be created. The client socket must then be delivered to\nthe master entry's handler. This handler must then create a\ncorresponding response socket and open a link.  After the link is\nestablished, the client and response sides become equal.\n\nRead more about {{#crossLinkModule \"ose.link\"}}Sockets and links{{/crossLinkModule}} ...\n\n\n### Logging and error handling\nTo log errors and messages, each module should at first create `M.log` instance by calling\n`Ose.logger(context)`. The context is an identifier of the logging\nnamespace. `Ose.logger()` either returns an existing `M.log`\ninstance for the namespace or creates a new one. Once created, the logger can be used to log messages.\n\nError handling tries to adhere to the production practices outlined\nby Joyent ([Error Handling in\nNode.js](http://www.joyent.com/developers/node/design/errors)).\n\nRead more about {{#crossLinkModule \"ose.logger\"}}Logging and error handling{{/crossLinkModule}} ...\n\n\n### Plugins\nTo run, each `OSE instance` requires a main configuration object\n(JavaScript object or JSON). Each main configuration object\nproperty contains configuration data for one plugin. A plugin can\nbe a class, singleton or module.\n\nAll plugins are registered to the `Ose.plugins` singleton. This\nsingleton prepares configurations for the OSE browser instances as\npart of the response to HTTP requests for `index.html`.\n\nDuring `OSE instance` startup, the following steps are carried out:\n1. Setup of the framework\n2. Preparation of plugins\n3. Configuration of plugins\n4. Asynchronous processing of plugin dependencies\n\nAfter all dependencies are processed, the `initialized` event is\nemitted by `Ose.plugins`.\n\nRead more about {{#crossLinkModule \"ose.plugin\"}}Plugins{{/crossLinkModule}} ...\n\n\n### Classes and singletons\nThis component facilitates the usage of classes or singletons with\nsimple code sharing and runtime specific behaviour by the browser\nand Node.js environments. This makes it possible to use\nprototypal inheritance to create classes and singletons and to mix\nin modules into class prototypes and singletons.\n\nRead more about {{#crossLinkModule \"ose.wrap\"}}Classes and singletons{{/crossLinkModule}} ...\n\n\n## Modules\nOpen Smart Environment framework consists of the following modules:\n- OSE browser\n- CLI interface module\n- Counter\n- OSE core\n- OSE node\n- OSE content\n\n### OSE browser\nThis script contains the OSE framework initialization in the browser. It must be sourced before any other OSE module that is using `window.ose()`.\n\nThe following steps are taken in this script:\n- The limited CommonJS require() behaviour is prepared. Every module, provided by the backend to the browser, is wrapped to `window.ose()` method call.\n- The `run` method on `document.onload` event is registered.\n- After the document is ready, `ose.setup()` is called to prepare OSE framework.\n- Finally {{#crossLinkModule \"ose.plugin\"}}plugins{{/crossLinkModule}} are configured with configuration from module `ose/config`.\n\nModule {{#crossLink \"ose.lib.browser\"}}OSE browser{{/crossLink}} reference ... \n\n### CLI interface module\nThis module provides a CLI interface module for OSE Node.js\ninstances. Commands can be entered to readline interface or run as\na script from a configuration file.\n\nInteractive example:\n    > sleep 10000\n    > space klinec.snasel.net\n    > shard d1\n    > entry kitchen.heater\n    > command power 0.23\n    > entry living.heater\n    > info\n    > detail\n\nConfiguration file example:\n\n    exports.cli = {\n      type: 'ose/lib/cli',\n      script: TODO\n        'wait 10000',\n        'space klinec.snasel.net',\n        'shard d1',\n        'entry kitchen.heater',\n        'command power 0.23',\n        'entry living.light',\n        'command switch \"on\"',\n        'info',\n        'detail'\n    }\n\nModule {{#crossLink \"ose.lib.cli\"}}CLI interface module{{/crossLink}} reference ... \n\n### Counter\nCounters are used for multiple asynchronous operations with one final callback.\n\nModule {{#crossLink \"ose.lib.counter\"}}Counter{{/crossLink}} reference ... \n\n### OSE core\nMost modules use the `OSE core` singleton by calling `var Ose = require('ose')`.\n\nModule {{#crossLink \"ose.core\"}}OSE core{{/crossLink}} reference ... \n\n### OSE node\nThis module contains the OSE framework initialization in the Node.js.\n\nModule {{#crossLink \"ose.lib.node\"}}OSE node{{/crossLink}} reference ... \n\n### OSE content\nProvides files of OSE framework package to the browser.\n\nModule {{#crossLink \"ose.content\"}}OSE content{{/crossLink}} reference ... \n\n## Contributions\nTo get started contributing or coding, it is good to read about the\ntwo main npm packages {{#crossLinkModule \"ose\"}}ose{{/crossLinkModule}} and {{#crossLinkModule \"bb\"}}ose-bb{{/crossLinkModule}}.\n\nThis software is in the pre-alpha stage. At the moment, it is\npremature to file bugs. Input is, however, much welcome in the form\nof ideas, comments and general suggestions.  Feel free to contact\nus via\n[github.com/opensmartenvironment](https://github.com/opensmartenvironment).\n\n## Licence\nThis software is licensed under the terms of the [GNU GPL version\n3](../LICENCE) or later\n"
        },
        {
            "displayName": "ose.data",
            "name": "ose.data",
            "description": "The data model of the framework is designed so that individual\ninstances of OSE hold subsets of the data and together create a\nsingle whole.\n\nData partitions are called {{#crossLink \"ose.lib.shard\"}}shards{{/crossLink}}. Basic data units contained by\n{{#crossLink \"ose.lib.shard\"}}shards{{/crossLink}} are called {{#crossLink \"ose.lib.entry\"}}entries{{/crossLink}}.\n\nEach {{#crossLink \"ose.lib.entry\"}}entry{{/crossLink}} is of a certain {{#crossLink \"ose.lib.kind\"}}kind{{/crossLink}}. {{#crossLink \"ose.lib.kind\"}}Kinds{{/crossLink}} define the properties\nand behaviour of {{#crossLink \"ose.lib.entry\"}}entries{{/crossLink}}. Kinds are namespaced using {{#crossLink \"ose.lib.scope\"}}scopes{{/crossLink}}.\n\nEach {{#crossLink \"ose.lib.shard\"}}shard{{/crossLink}} belongs to a {{#crossLink \"ose.lib.space\"}}space{{/crossLink}} that act as the shard's\nnamespace. Each shard is tied to {{#crossLink \"ose.lib.scope\"}}scope{{/crossLink}} and can contain only\nentries of kinds from that {{#crossLink \"ose.lib.scope\"}}scope{{/crossLink}}.\n\nKind hierarchy:\n* scope\n  * kind\n\nData partitioning hierarchy:\n* space\n  * shard\n    * entry\n\nExample:\n\nThe `reading.light` is an entry of the kind `light`, the `light`\nkind belongs to the `control` scope, and the `reading.light` entry\nis saved in the shard `living.room`, which belongs to the space\n`my.house`.\n\n## Commands\nIt is possible to send commands to individual {{#crossLink \"ose.lib.entry\"}}entries{{/crossLink}}. Each\ncommand is delivered to the {{#crossLinkModule \"ose.peer\"}}home{{/crossLinkModule}} of an {{#crossLink \"ose.lib.entry\"}}entry{{/crossLink}}. Commands consist\nof a command name and optional data. A command can be a request for\ndata or to establish a new {{#crossLinkModule \"ose.link\"}}link{{/crossLinkModule}}.\n\nCommand handlers can be registered for a {{#crossLink \"ose.lib.kind\"}}kind{{/crossLink}} with an `on()`\nmethod call. The {{#crossLink \"ose.lib.kind\"}}Kind{{/crossLink}} class is not an {{#crossLinkModule \"ose.wrap\"}}Event Emitter{{/crossLinkModule}} descendant.\nIn command handler code, the target `entry` can be accessed in\n`this.entry`.\n\nExample:\n    TODO\n\n## Modules\nData model consists of the following modules:\n- Entry command client socket\n- Entry class\n- Master entry response socket\n- Slave entry client socket\n- Shard class\n- Master shard response socket\n- Slave shard client socket\n- Space class\n- List of spaces\n- Kind class\n- Scope class\n\n### Entry command client socket\nSends some command to the target entry. When the link disconnects,\nit tries to reopen it as soon as possible.\n\nModule {{#crossLink \"ose.lib.entry.link\"}}Entry command client socket{{/crossLink}} reference ... \n\n### Entry class\nAn {{#crossLink \"ose.lib.entry\"}}Entry{{/crossLink}} instance is a data structure representing a physical\nobject or logical concept. Each {{#crossLink \"ose.lib.entry\"}}entry{{/crossLink}} belongs to a certain\n{{#crossLink \"ose.lib.shard\"}}shard{{/crossLink}}. Within the {{#crossLink \"ose.lib.shard\"}}shard{{/crossLink}}, it has a unique `id`. Each {{#crossLink \"ose.lib.entry\"}}entry{{/crossLink}} is\nof a certain {{#crossLink \"ose.lib.kind\"}}kind{{/crossLink}} that defines its behaviour. An {{#crossLink \"ose.lib.entry\"}}entry{{/crossLink}} can\ncontain a `data` object in JSON format (analogous to a database\ntable row). At the moment, `data` are defined at the start-up of an\n{{#crossLinkModule \"ose.peer\"}}OSE instance{{/crossLinkModule}} and are immutable. Data management and persistence\nare planned features. The `state` JSON object, unlike `data`, can\noften change and is non-persistent by design because it reflects\nchanging objective reality. Changes of `state` objects are\npropagated to {{#crossLinkModule \"ose.peer\"}}peers{{/crossLinkModule}} tracking changes of certain {{#crossLink \"ose.lib.entry\"}}entries{{/crossLink}}.\n\nModule {{#crossLink \"ose.lib.entry\"}}Entry class{{/crossLink}} reference ... \n\n### Master entry response socket\nReponse socket for slave entry requests. Is registered in `entry.slaves`.\n\nModule {{#crossLink \"ose.lib.entry.master\"}}Master entry response socket{{/crossLink}} reference ... \n\n### Slave entry client socket\nSocket to build a link to the master entry.\n\nModule {{#crossLink \"ose.lib.entry.slave\"}}Slave entry client socket{{/crossLink}} reference ... \n\n### Shard class\nA shard is a set of {{#crossLink \"ose.lib.entry\"}}entries{{/crossLink}}. Each shard belongs to a certain\n{{#crossLink \"ose.lib.space\"}}space{{/crossLink}}. Every shard has a `sid` (shard id) that is unique within\nits {{#crossLink \"ose.lib.space\"}}space{{/crossLink}}. Each shard is tied to a single {{#crossLink \"ose.lib.scope\"}}scope{{/crossLink}} (ie. it cannot\ncontain {{#crossLink \"ose.lib.entry\"}}entries{{/crossLink}} of {{#crossLink \"ose.lib.kind\"}}kinds{{/crossLink}} belonging to different\n{{#crossLink \"ose.lib.scope\"}}scopes{{/crossLink}}). Every shard either belongs to the same {{#crossLinkModule \"ose.peer\"}}home{{/crossLinkModule}} as its\nspace or is assigned to a different one.\n\nModule {{#crossLink \"ose.lib.shard\"}}Shard class{{/crossLink}} reference ... \n\n### Master shard response socket\nSocket created in response to a request from a slave shard.\n\nModule {{#crossLink \"ose.lib.shard.master\"}}Master shard response socket{{/crossLink}} reference ... \n\n### Slave shard client socket\nSocket for communicating from a shard to a master in another OSE\ninstance.\n\nModule {{#crossLink \"ose.lib.shard.slave\"}}Slave shard client socket{{/crossLink}} reference ... \n\n### Space class\nA space is a data namespace containing {{#crossLink \"ose.lib.shard\"}}shards{{/crossLink}}. It is identified\nby its unique `name` (eg. a domain name or email address).\n\nModule {{#crossLink \"ose.lib.space\"}}Space class{{/crossLink}} reference ... \n\n### List of spaces\nContains a list of all spaces registered by this OSE instance\n\nModule {{#crossLink \"ose.lib.space.list\"}}List of spaces{{/crossLink}} reference ... \n\n### Kind class\nEach {{#crossLink \"ose.lib.entry\"}}entry{{/crossLink}} is of a certain kind. Kinds define the properties and\nbehaviour of {{#crossLink \"ose.lib.entry\"}}entries{{/crossLink}}.\n\nKinds should describe, as closely as possible, physical or virtual\nobjects that can be managed somehow.\n\nModule {{#crossLink \"ose.lib.kind\"}}Kind class{{/crossLink}} reference ... \n\n### Scope class\nA scope is a set of {{#crossLink \"ose.lib.kind\"}}kinds{{/crossLink}} of {{#crossLink \"ose.lib.entry\"}}entries{{/crossLink}}.\n\nModule {{#crossLink \"ose.lib.scope\"}}Scope class{{/crossLink}} reference ... \n"
        },
        {
            "displayName": "ose.http",
            "name": "ose.http",
            "description": "This component provides an HTTP server for OSE. It responds to HTTP\nrequests and provides data needed to run OSE instance in the\nbrowser. Each OSE package that needs to run in the browser creates\none `ose/lib/http/content` class instance and defines which files\nwill be provided to the browser.\n\nIt also handles incoming WebSocket requests from other OSE\ninstances and relays them to the {{#crossLinkModule \"ose.peer\"}}peers component{{/crossLinkModule}}.\n\n## Modules\nHTTP server consists of the following modules:\n- HTTP Content\n- HTTP server plugin\n\n### HTTP Content\nDescendants of this class provide browsers with files from\nindividual OSE packages.\n\nModule {{#crossLink \"ose.lib.http.content\"}}HTTP Content{{/crossLink}} reference ... \n\n### HTTP server plugin\nThis singleton provides HTTP server for OSE instance.\n\nModule {{#crossLink \"ose.lib.http\"}}HTTP server plugin{{/crossLink}} reference ... \n"
        },
        {
            "displayName": "ose.link",
            "name": "ose.link",
            "description": "The framework makes it possible to easily create links between\n`entries` to allow communication regardless of whether it is\nrealized within one OSE instance or transparently across multiple\nOSE instances. A link is a virtual bidirectional communication\nchannel between two sockets. Link cannot exist without an active\n{{#crossLinkModule \"ose.peer\"}}peer-to-peer{{/crossLinkModule}} connection channel between sockets. When some\nWebSocket channel is closed, an `error` handler is called on both\nends of links using such channel and links are closed.\n\nEach socket is an object with handlers. A socket is either a client\nsocket or a response socket. To establish a link, a client socket\nmust first be created. The client socket must then be delivered to\nthe master entry's handler. This handler must then create a\ncorresponding response socket and open a link.  After the link is\nestablished, the client and response sides become equal.\n\n## Example\n\nBelow is a real example of how a link is created and works between\nthe {{#crossLink \"control.lib.light\"}}light entry{{/crossLink}} and the {{#crossLink \"control.lib.switch\"}}switch entry{{/crossLink}}. The {{#crossLink \"control.lib.light\"}}light entry{{/crossLink}} has a\ncontrolling {{#crossLink \"control.lib.switch\"}}switch entry{{/crossLink}} identification assigned in its\n`entry.data.switch` value. Based on this object, the {{#crossLink \"control.lib.light\"}}light entry{{/crossLink}}\ncalls its `postTo()` method that sends a `relay` command to the\n{{#crossLink \"control.lib.switch\"}}switch entry{{/crossLink}} together with the client socket. The {{#crossLink \"control.lib.switch\"}}switch entry{{/crossLink}}\nthen creates a response socket and links the two sockets by calling\n`Ose.link.open()`. The `open()` handler of the client socket is\nthen invoked. From now on, the switch response socket relays\n`press`, `release`, `hold` and `tap` events to the client socket of\nthe {{#crossLink \"control.lib.light\"}}light entry{{/crossLink}}.\n\nThis example is composed of snippets from the following files:\n\n- Light entry kind: [ose-control/lib/light/index.js](../files/.._control_lib_light_index.js.html)\n- Light client socket class: [ose-control/lib/light/switch.js](../files/.._control_lib_light_switch.js.html)\n- Switch entry kind: [ose-control/lib/switch/index.js](../files/.._control_lib_switch_index.js.html)\n- Switch response socket class: [ose-control/lib/switch/relay.js](../files/.._control_lib_switch_relay.js.html)\n\nCreation of client socket – [ose-control/lib/light/index.js](../files/.._control_lib_light_index.js.html)\n\n    // Create a client socket class\n    var Switch = M.class('ose-control/lib/light/switch');\n\n    ...\n    // Create a client socket when an entry is initializing\n    new Switch(entry);\n    ...\n\nSend a command to the {{#crossLink \"control.lib.switch\"}}switch entry{{/crossLink}} after the client socket is initialized – [ose-control/lib/light/switch.js](../files/.._control_lib_light_switch.js.html)\n\n    ...\n    that.entry.postTo(\n      that.entry.data.switch,\n      'relay',\n      null,\n      that\n    );\n    ...\n\nCreate a switch response socket in {{#crossLink \"control.lib.switch\"}}switch entry{{/crossLink}} `relay` command handler – [ose-control/lib/switch/index.js](../files/.._control_lib_switch_index.js.html)\n\n    // Creates response socket class\n    var Relay = M.class('ose-control/lib/switch/relay');\n    ...\n    // Registers a relay handler in the switch entry kind\n    this.on('relay', relay);\n    ...\n    // Handler body\n    function relay(req, socket) {\n      // Creates response socket\n      new Relay(this.entry, socket);\n    };\n\nOpen the link after response socket is initialized – [ose-control/lib/switch/relay.js](../files/.._control_lib_switch_relay.js.html)\n\n    // Open link; `this` is the response socket, and `socket` is the\n    // client socket.  On both sides, the other socket is assigned to\n    // the `link` property (e.g. `client.link = response`).\n    Ose.link.open(this, socket, resp);\n\nThe client's `open()` handler is called – [ose-control/lib/light/switch.js](../files/.._control_lib_light_switch.js.html).\n\n    exports.open = function(req) {\n      ...\n    };\n\n\n## Handlers\nEach `socket` is an object with handlers attached to it. A handler\nis a method directly assigned to a socket object (or a prototype\nchain) with the handler's `name` as the socket object's key. A\nsocket is not an `EventEmitter`.\n\nHandlers are called directly via `this.link.handler(data)`, where\n`handler` is the handler's name and `this` is the the other socket\nof the link.\n\nThere are some special handlers:\n\n- `open({{#crossLink \"ose.lib.entry\"}}data{{/crossLink}})`:<br />\n  Invoked on the client side when the response calls\n  `Ose.link.open(resp, client, data)`. On both sides, the other\n  socket is assigned to the `link` property (e.g. `client.link =\n  response`). There is no `open()` handler on the response side.\n\n- `close({{#crossLink \"ose.lib.entry\"}}data{{/crossLink}})`:<br />\n  Invoked when the link is gracefully closed by\n  `Ose.link.close(socket, data)`. Can be called instead of\n  `Ose.link.open()` from the response side. In such case the link\n  is not opened and acts only as a callback. `Ose.link.close()`\n  destroys the link and deletes the `link` property of both\n  sockets.\n\n- `error(err)`:<br />\n  Invoked in the case of an error with `Ose.link.error(socket,\n  err)`. `err` should be an instance of `Error`. `Ose.link.error()`\n  destroys the link and deletes the `link` property of both sides.\n  An error handler is invoked, for example, when the underlying\n  WebSocket channel is closed.\n\n## Network transparency\n\nTODO\n\n## Modules\nSockets and links consists of the following modules:\n- Links helper\n\n### Links helper\nThis module contains methods for controlling links.\n\nModule {{#crossLink \"ose.lib.link\"}}Links helper{{/crossLink}} reference ... \n"
        },
        {
            "displayName": "ose.logger",
            "name": "ose.logger",
            "description": "To log errors and messages, each module should at first create `M.log` instance by calling\n`Ose.logger(context)`. The context is an identifier of the logging\nnamespace. `Ose.logger()` either returns an existing `M.log`\ninstance for the namespace or creates a new one. Once created, the logger can be used to log messages.\n\nError handling tries to adhere to the production practices outlined\nby Joyent ([Error Handling in\nNode.js](http://www.joyent.com/developers/node/design/errors)).\n\n## Usage\n\nExample module :\n\n    'use strict';\n\n    var Ose = require('ose');\n    var M = Ose.module(module);\n    ...\n    M.log.info('Processing');\n\nTo create an error, it is possible to use `Ose.error()`, which\nappends an optional `subject` and `data` to the error object. the\n`subject` and `data` make it easier to analyse problems. If an\nerror is logged, `subject.identify()`, if it is defined, is used\nto display subject identification.\n\nExample:\n\n    var err = Ose.error(subject, 'Something has gone terribly wrong.', arguments);\n    ...\n\n    // To log an error:\n    M.log.error(err);\n\n    // or to use an error in callback:\n    cb(err);\n\n    // or to throw an error:\n    throw err;\n\n    // or send an error to a link:\n    Ose.link.error(socket, err);\n\nWhen calling any callback with an error response, sending an error to a link, or throwing an exception, `Error` instance created by `Ose.error()` should be used.\n\n## Modules\nLogging and error handling consists of the following modules:\n- Logger\n\n### Logger\n\n\nModule {{#crossLink \"ose.lib.logger\"}}Logger{{/crossLink}} reference ... \n"
        },
        {
            "displayName": "ose.peer",
            "name": "ose.peer",
            "description": "The system, which is based on the OSE framework, consist of one or\nmore configured instances, called OSE instances. An OSE instance is\nidentified by a unique `name` an can run in Node.js or in a web\nbrowser.\n\nFrom the point of view of an OSE instance, a peer is another OSE\ninstance. Two peers can communicate with each other using the\nWebSocket protocol. Peers can be accessed directly, when a\nWebSocket channel exists, or indirectly, by using another peer as a\ngateway.\n\nThis component allows the following communication between OSE\ninstances:\n\n- Obtaining {{#crossLink \"ose.lib.entry\"}}entries{{/crossLink}} and views of entries.\n- Synchronization of {{#crossLink \"ose.lib.entry\"}}states of entries{{/crossLink}} in near real-time.\n- Sending of commands to entries.\n- Establishing transparent, asynchronous bidirectional {{#crossLinkModule \"ose.link\"}}links{{/crossLinkModule}}\n  between entries.\n\n## Peer-to-peer relationships\nRemote peers of an OSE instance can enter the following connection\nstates:\n\n- near: peer reachable directly through a WebSocket\n- far: peer not reachable directly, but through a gateway \"near\"\n  (or chain of \"nears\")\n- unreachable: a peer that can't be reached\n\nIn addition, each OSE instance creates a {{#crossLink \"ose.lib.peer.here\"}}here peer{{/crossLink}} object\ndescribing itself.\n\nFrom the point of view of a {{#crossLink \"ose.lib.shard\"}}shard{{/crossLink}}, a `home` is a {{#crossLink \"ose.lib.peer.remote\"}}peer{{/crossLink}} to which\nits {{#crossLink \"ose.lib.entry\"}}entries{{/crossLink}} logically belong. The `home` is where commands are\nexecuted.\n\n\n## Establishing a peer-to-peer channel\n\nWhen a communication channel between two OSE instances is\nestablished, the following steps are taken:\n\n1. The client Peer instance calls the `connect()` method.\n  - A {{#crossLink \"ose.lib.ws\"}}WebSocket wrapper{{/crossLink}} is created.\n  - A WebSocket native object is created and connects to `peer.url`.\n\n2. The server verifies incoming request\n  - When there is no Peer instance for the client OSE instance, one is created.\n\n3. Server opens a WebSocket channel\n  - {{#crossLink \"ose.lib.ws\"}}WebSocket wrapper{{/crossLink}} is created.\n\n4. Handshake between peers\n\n5. Both Peer instances assign the `rxData()` method to the `rx`\n   property of {{#crossLink \"ose.lib.ws\"}}WebSocket wrapper{{/crossLink}} instance.\n   - After this step, the client and server become equal.\n\n\n## Messages\nFor standard peer to peer communication, data blocks, sent through\nWebSockets, are called \"messages\". Each message has a type.\nDepending on the message type, the appropriate method from {{#crossLink \"ose.lib.peer.rx\"}}peer rx\nhandlers{{/crossLink}} is called to handle the incoming message.\n\n## Modules\nPeers consists of the following modules:\n- Here peer\n- Peer list\n- Remote peer\n- Peer RX handlers\n- Browser WebSocket wrapper\n- WebSocket wrapper class\n- Master WebSocket client socket\n- Node WebSocket wrapper\n- Relaying WebSocket response socket\n- WebSocket browser worker\n\n### Here peer\nSingleton representing own OSE instance peer. Each OSE instance\nregisters this singleton at startup with other peers in `Ose.peers`\nunder it's own name, i.e. `Ose.name`.\n\nModule {{#crossLink \"ose.lib.peer.here\"}}Here peer{{/crossLink}} reference ... \n\n### Peer list\nSingleton containing all registered peers. The singleton can be\naccessed through `Ose.peers`. A single peer can be accessed through\n`Ose.peers.get(peer name)`.\n\nModule {{#crossLink \"ose.lib.peer.list\"}}Peer list{{/crossLink}} reference ... \n\n### Remote peer\nEach instance of this class represents another OSE instance and\nencapsulates communication with it.  It creates and manages the\n{{#crossLink \"ose.lib.ws\"}}WebSocket wrapper{{/crossLink}} class instance, which handles communication\nthrough WebSockets.  Can act as a server or a client.\n\nKeeps the connection opened by reconnecting.\n\nModule {{#crossLink \"ose.lib.peer.remote\"}}Remote peer{{/crossLink}} reference ... \n\n### Peer RX handlers\nThis module contains handlers for incomming communication of\nstandard peer to peer traffic.\n\nModule {{#crossLink \"ose.lib.peer.rx\"}}Peer RX handlers{{/crossLink}} reference ... \n\n### Browser WebSocket wrapper\nExtension of `WebSocket wrapper` for browser\n\nModule {{#crossLink \"ose.lib.ws.browser\"}}Browser WebSocket wrapper{{/crossLink}} reference ... \n\n### WebSocket wrapper class\nCommunication between two near OSE instances is carried out via the\nWebSocket protocol. The native WebSocket object, provided by the\nruntime environment, is wrapped by an instance of the WebSocket\nwrapper class. This instance is created and controlled by a {{#crossLink \"ose.lib.peer.remote\"}}Peer{{/crossLink}}\ninstance and hides differences between the Node.js and browser\nenvironments.\n\nEach WebSocket wrapper instance handles incoming packets via its\n`rx()` method. WebSocket communication behaviour can be controlled\nby assigning some method to the `rx` property.\n\nModule {{#crossLink \"ose.lib.ws\"}}WebSocket wrapper class{{/crossLink}} reference ... \n\n### Master WebSocket client socket\nCreated when a new link is requested from another peer via a\nWebSocket. Acts as a client socket of the link.\n\nTogether with {{#crossLink \"ose.lib.ws.slave\"}}ose.lib.ws.slave{{/crossLink}}, this makes links\nnetwork-transparent.\n\nModule {{#crossLink \"ose.lib.ws.master\"}}Master WebSocket client socket{{/crossLink}} reference ... \n\n### Node WebSocket wrapper\nExtension of `WebSocket wrapper` for Node.js\n\nModule {{#crossLink \"ose.lib.ws.node\"}}Node WebSocket wrapper{{/crossLink}} reference ... \n\n### Relaying WebSocket response socket\nCreated when a peer responds to a link request with `open()`. Acts\nas a response socket of the link.\n\nTogether with {{#crossLink \"ose.lib.ws.master\"}}ose.lib.ws.master{{/crossLink}}, this makes links\nnetwork-transparent.\n\nModule {{#crossLink \"ose.lib.ws.relay\"}}Relaying WebSocket response socket{{/crossLink}} reference ... \n\n### WebSocket browser worker\nWorker object that isolates the {{#crossLink \"ose.lib.ws\"}}WebSocket wrapper{{/crossLink}} timer from the\n`window` object in the browser. A workaround for better (but still\nnot correct!) timer behaviour in the Android environmnent while\nsleeping.\n\nModule {{#crossLink \"ose.lib.ws.slave\"}}WebSocket browser worker{{/crossLink}} reference ... \n"
        },
        {
            "displayName": "ose.plugin",
            "name": "ose.plugin",
            "description": "To run, each `OSE instance` requires a main configuration object\n(JavaScript object or JSON). Each main configuration object\nproperty contains configuration data for one plugin. A plugin can\nbe a class, singleton or module.\n\nAll plugins are registered to the `Ose.plugins` singleton. This\nsingleton prepares configurations for the OSE browser instances as\npart of the response to HTTP requests for `index.html`.\n\nDuring `OSE instance` startup, the following steps are carried out:\n1. Setup of the framework\n2. Preparation of plugins\n3. Configuration of plugins\n4. Asynchronous processing of plugin dependencies\n\nAfter all dependencies are processed, the `initialized` event is\nemitted by `Ose.plugins`.\n\n## OSE framework setup\n\nBasic classes and singletons are set up depending on the specified\nruntime environment (browser or server).\n\n\n## Preparation of plugins\n\nEach property of the main configuration object contains the\nconfiguration of a single OSE plugin. The `id` property of each\nplugin configuration specifies the module to be loaded with\n`require()`. If the `id` property is omitted, the key of the plugin\nconfiguration is taken as the module id.\n\nAny CommonJS module can be a plugin. If a module defines a class,\nits instance is created without parameters and becomes a plugin.\nIf a module defines a singleton, it gets initialized without any\narguments. Modules not defining a class or singleton are simply\nrequired.\n\n\n## Configuration of plugins\n\nAfter all plugins are created, individual plugins are configured\nusing the `plugin.config(data)` method, where `data` is taken from\nthe main configuration object for each plugin.\n\nThe `config` method, if it exists, is called on every prototype in\na plugin prototype chain. It must not call the ancestor `config()`\nmethod.\n\nDuring this step, dependencies can be registered by calling\n`ose.plugins.addDependency()`.\n\n\n## Dependencies\n\nEach dependency is defined by a method with a callback and an\noptional 'test' parameter.\n\nExample:\n\nTODO addDependency(dependency, test) ...\n\nTODO dependency(cb)...\n\nWhen a dependency is processed, it must call the provided\ncallback. When the processing of one dependency ends, the next\ndependency whose `test` method returns `TRUE` is found and\nprocessed. Other dependencies can be added during this step. When\nthere are no more dependencies left, the `initialized` event is\nemitted by `Ose.plugins`.\n\nTo run some code after all plugins are initialized, register a\nmethod via `Ose.plugins.on('initialized', <method>)` during the\n\"configuration\" or \"dependencies\" phase.\n\n\n## Extending\n\nIt is easy to extend OSE by creating a new npm package and adding\nan empty object with the package name as a key to the main\nconfiguration object of an {{#crossLinkModule \"ose.peer\"}}OSE instance{{/crossLinkModule}}.\n\nTo use some configuration, define the `config()` method on the\npackage's main `module.exports` and provide some configuration data\nto the package configuration property of the main configuration\nobject. The {{#crossLinkModule \"ose.plugin\"}}Plugins component{{/crossLinkModule}} then initializes the new package as\nanother OSE plugin during startup of an {{#crossLinkModule \"ose.peer\"}}OSE instance{{/crossLinkModule}}.\n\nTODO: example\n\n## Modules\nPlugins consists of the following modules:\n- Plugins singleton\n\n### Plugins singleton\nHandles plugin instances defined in configuration file (or object).\n\nModule {{#crossLink \"ose.lib.plugins\"}}Plugins singleton{{/crossLink}} reference ... \n"
        },
        {
            "displayName": "ose.wrap",
            "name": "ose.wrap",
            "description": "This component facilitates the usage of classes or singletons with\nsimple code sharing and runtime specific behaviour by the browser\nand Node.js environments. This makes it possible to use\nprototypal inheritance to create classes and singletons and to mix\nin modules into class prototypes and singletons.\n\n## Module wrapping\n\nThe creation of classes and singletons is based on the CommonJS\nModules spec. Each class or singleton is defined within its own\nmodule.\n\nTo create a class or singleton, you first need to wrap the module\ncontaining the class or singleton definition by calling one of the\nfollowing:\n\n- `Ose.class(module)`.\n- `Ose.singleton(module)`.\n- `Ose.package(module)`.\n- `Ose.module(module)`.\n\nExample:\n\n    // Module containing class definiton.\n    'use strict';\n\n    // Require OSE.\n    var Ose = require('ose');\n    // Create and return wrap instance\n    var M = Ose.class(module);\n    ...\n\nThe `Ose` variable gives access to global OSE functionalities.  The\n`M` variable contains the module wrapper and gives access to\nfunctionalities relative to the module.\n\nIMPORTANT:\n\nEach time a module is wrapped using `Ose.class`, `Ose.singleton` or\n`Ose.package` (ie. not `Ose.module`), the wrapper adds the `M`\nproperty to `module.exports`. It is not allowed to overwrite this\nproperty. The `M` property is read-only and non-configurable. It is\nbetter not to overload this property.\n\n## Classes\n\nA class is a function used as a class constructor with a prototype.\n\nTo use a class, you need to carry out three steps:\n1. Prepare a module containing a class definition.\n2. Obtain a class constructor.\n3. Create a new object.\n\nFirst, the class needs to be prepared in the module containing the\nclass definition by calling `Ose.class(module, {{#crossLinkModule \"ose.wrap\"}}constructor{{/crossLinkModule}},\n{{#crossLinkModule \"ose.wrap\"}}super{{/crossLinkModule}})`. The `constructor` is an optional class constructor\nmethod. If it is not defined, it gets created automatically. The\n`super` parameter can be `undefined`, a class constructor or a\nclass name. It is not possible to inherit from singletons.\n\nExample module with class preparation::\n\n    // Module \"ose/lib/entry\"\n    'use strict';\n\n    // Require OSE\n    var Ose = require('ose');\n\n    // Wrap module and specifies a class with a constructor\n    // function `C` and \"EventEmitter\" as a super-class.\n    var M = Ose.class(module, C, 'EventEmitter');\n\n    // Class constructor\n    function C(...) {\n      // Call super constructor\n      M.super.call(this);\n      ...\n    }\n\n    // Add properties of the class' prototype to the `exports`\n    // object:\n\n    // Define property.\n    exports.config = function(name, data) {\n      ...\n    };\n\n    // Define another property\n    exports.identify = function() {\n      return {\n        space: this.shard.space.name,\n        shard: this.shard.sid,\n        entry: this.id\n      };\n    };\n\n\nThe second step is to obtain a class constructor with its\nprototype. This step is carried out when the class is first\naccessed by calling `M.class('ose/lib/entry')`. Multiple calls to\n`M.class('ose/lib/entry')` return the same, already created\nclass. When called for the first time, the class prototype is\ncreated from module exports and optional mixins. If the class has\nan ancestor, the constructor should usually call the super\nconstructor (see example above). If a class is defined without a\nconstructor, the constructor is created.\n\nThe last step is to create a new object based on the class.\n\nClass usage example:\n\n    // Some other module ...\n    'use strict';\n\n    // Require OSE\n    var Ose = require('ose');\n    // Wrap module\n    var M = Ose.module(module);\n\n    // Obtain class constructor (second step).\n    var Entry = M.class('ose/lib/entry');\n\n    ...\n\n    // Create new object as an Entry instance (third step).\n    entry = new Entry(shard, kind);\n\n    ...\n\nThere is a built-in class named **EventEmitter**. To use this\nclass, pass `'EventEmitter'` to the `class()` method (see the\nexamples above). In the browser environment, the\n[\"wolfy87-eventemitter\"](https://github.com/Wolfy87/EventEmitter)\npackage is used.\n\nTo access the `module.exports` object that is wrapped and prepared\nas a class, call the standard `require('ose/lib/entry')`\nmethod. This call returns the original `module.exports` object.\n\nTo extend any class, use the following example:\n\n    // Require OSE\n    var Ose = require('ose');\n    // Wrap module\n    var M = Ose.module(module);\n\n    // Obtain Entry class\n    var Entry = M.class('ose/lib/entry');\n\n    // Add new method to entry class prototype\n    Entry.prototype.newMethod = function() {...};\n\nChanging the prototype of a class alters all its instances and\ndescendants, even those already created.\n\n## Singletons\n\nEach singleton is an object. There are two types of singletons. The\nfirst initializes itself, and the second is initialized outside the\nsingleton definition.\n\nIMPORTANT: Every singleton must always exist in only one instance\nwithin a single running instance of OSE. The use of npm can result\nin mixing multiple installations of packages using singletons\nwithin a single OSE instance. This situation must be avoided.\n\nLike the creation of a class, the creation of a singleton is a\nthree-step process:\n\n1. Prepare a module containing the singleton's definition and\n   create the singleton\n2. Obtain singleton initialization method\n3. Initialize and obtain the singleton\n\nExample module with self-initializing singleton::\n\n    // Require OSE\n    var Ose = require('ose');\n    // Wrap module as a singleton\n    var M = Ose.singleton(module, I, 'EventEmitter');\n    // Initialization of the singleton\n    exports = M.init();\n\n    // Singleton initialization\n    function I() {\n      // Call super constructor\n      M.super.call(this);\n      ...\n    }\n\n    // Properties of the singleton are defined in the `exports` variable:\n\n    exports.identify = function() {\n      return {\n        id: this.id\n      };\n    };\n\n    exports.getId = function() {\n      return id;\n    };\n\n    ...\n\nExample module without singleton self-initialization:\n\n    // Require OSE\n    var Ose = require('ose');\n    // Wrap module as a singleton\n    var M = Ose.singleton(module, I, 'EventEmitter');\n    // Initialization of the singleton\n    exports = M.exports;\n    ...\n\nExample module with separate singleton initialization:\n\n    // Some other module ...\n    'use strict';\n\n    // Require OSE\n    var Ose = require('ose');\n    // Wrap module\n    var M = Ose.module(module);\n\n    ...\n\n    // Obtain singleton initialization (second step)\n    var init = M.singleton('ose/lib/peer/list');\n\n    // Initialize and obtain singleton (third step)\n    var result = init(arg);\n\n    // Or the second and third step together without the init\n    // variable:\n    var result = M.singleton('ose/lib/peer/list')(arg);\n\n    ...\n\nTo access or extend any initialized singleton, use standard `require`:\n\n    // Module changing singleton.\n    'use strict';\n\n    // Require OSE.\n    var Ose = require('ose');\n\n    // Obtain singleton.\n    var result = require('ose/lib/id');\n\n    // Add new method to the singleton.\n    result.newMethod = function() {...};\n\nThe singleton can be changed before it is initialized. If this is\ndone, it is possible that the change will be overwritten by mixing\nother modules during singleton initialization.\n\n\n## Mixins\n\nIt is possible to mix another module into a class prototype or\nsingleton. To do that, use the `append()` or `prepend()` methods of\nthe `wrap` object.\n\nExample:\n\n    // Some module\n    'use strict';\n    // Require OSE\n    var Ose = require('ose');\n\n    // Wrap module\n    var M = Ose.class(module, C, 'EventEmitter');\n\n    // Prepend a module\n    M.prepend('someModuleName')\n    // Append a module depending on the runtime.\n    M.append('runtime')\n\nThe `append()` or `prepend()` methods supports call chaining. Both\nmethods accept a module name or array of module names. Properties\nto a class prototype or singleton are mixed in the second step of\nclass or singleton creation. Conflicting properties are overwritten\nin the following order: Last prepended, prepended, module.exports,\nfirst appended, appended.\n\nIt is possible to use the following predefined values as module names:\n* 'browser' – If in the browser environment, use the `browser.js`\n   module from the same directory.\n* 'node' – If in the Node.js environment, use the `node.js`\n   module from the same directory.\n* 'runtime' – Use either the `browser.js` or `node.js` module\n   depending on the environment.\n\nIt is possible to use relative paths as module names.\n\n## Relative paths\nTODO\n\nA class or singleton is identified by its module\n(e.g. `ose/lib/entry`).\n\n## Modules\nClasses and singletons consists of the following modules:\n- Common wrapper class\n- Class wrapper\n- Module wrapper\n- Package wrapper\n- Singleton wrapper\n\n### Common wrapper class\nProperties common for all wrappers\n\nModule {{#crossLink \"ose.wrap.common\"}}Common wrapper class{{/crossLink}} reference ... \n\n### Class wrapper\nClass defining a class module wrapper.\n\nModule {{#crossLink \"ose.wrap.class\"}}Class wrapper{{/crossLink}} reference ... \n\n### Module wrapper\nClass defining a standard module wrapper.\n\nModule {{#crossLink \"ose.wrap.module\"}}Module wrapper{{/crossLink}} reference ... \n\n### Package wrapper\nClass defining a package module wrapper.\n\nModule {{#crossLink \"ose.wrap.package\"}}Package wrapper{{/crossLink}} reference ... \n\n### Singleton wrapper\nThe class defining a singleton module wrapper.\n\nModule {{#crossLink \"ose.wrap.singleton\"}}Singleton wrapper{{/crossLink}} reference ... \n"
        },
        {
            "displayName": "pa",
            "name": "pa",
            "description": "This package implements volume control for the {{#crossLinkModule \"media\"}}OSE Media player{{/crossLinkModule}}.\n\n## Status\n- Pre-alpha stage (insecure and buggy)\n- Unstable API\n- Gaps in the documentation\n- No test suite\n\nThis is not yet a piece of download-and-use software. Its important\nto understand the basic principles covered by this documentation.\n\nUse of this software is currently recommended only for users that\nwish participate in the development process (see Contributions).\n\nTODO: Make contribution a link\n\n## Getting started\nTo get started with OSE, refer to the {{#crossLinkModule \"bundle\"}}ose-bundle{{/crossLinkModule}} package and\n{{#crossLinkModule \"bundle.media\"}}Media player example application{{/crossLinkModule}}.\n\n## Modules\nOpen Smart Environment PulseAudio package consists of the following modules:\n- PulseAudio control kind\n- OSE PulseAudio core\n- OSE PulseAudio content\n\n### PulseAudio control kind\n{{#crossLink \"ose.lib.kind\"}}Entry kind{{/crossLink}} for PulseAudio instances\n\nEach entry communicates with PulseAudio via its D-Bus\ninterface. This functionality is currently implemented in a Python\nchild process.\n\nModule {{#crossLink \"pa.lib.dbus\"}}PulseAudio control kind{{/crossLink}} reference ... \n\n### OSE PulseAudio core\nCore singleton of ose-pa npm package. Registers {{#crossLink \"ose.lib.kind\"}}entry kinds{{/crossLink}}\ndefined by this package to the `\"control\"` {{#crossLink \"ose.lib.scope\"}}scope{{/crossLink}}.\n\nModule {{#crossLink \"pa.lib\"}}OSE PulseAudio core{{/crossLink}} reference ... \n\n### OSE PulseAudio content\nProvides files of OSE PulseAudio package to the browser.\n\nModule {{#crossLink \"pa.content\"}}OSE PulseAudio content{{/crossLink}} reference ... \n\n## Contributions\nTo get started contributing or coding, it is good to read about the\ntwo main npm packages {{#crossLinkModule \"ose\"}}ose{{/crossLinkModule}} and {{#crossLinkModule \"bb\"}}ose-bb{{/crossLinkModule}}.\n\nThis software is in the pre-alpha stage. At the moment, it is\npremature to file bugs. Input is, however, much welcome in the form\nof ideas, comments and general suggestions.  Feel free to contact\nus via\n[github.com/opensmartenvironment](https://github.com/opensmartenvironment).\n\n## Licence\nThis software is licensed under the terms of the [GNU GPL version\n3](../LICENCE) or later\n"
        },
        {
            "displayName": "rpi",
            "name": "rpi",
            "description": "This package contains {{#crossLink \"ose.lib.kind\"}}entry kinds{{/crossLink}} for integrating hardware from\nthe Raspberry Pi Foundation into OSE.\n\n## Status\n- Pre-alpha stage (insecure and buggy)\n- Unstable API\n- Gaps in the documentation\n- No test suite\n\nThis is not yet a piece of download-and-use software. Its important\nto understand the basic principles covered by this documentation.\n\nUse of this software is currently recommended only for users that\nwish participate in the development process (see Contributions).\n\nTODO: Make contribution a link\n\n## Getting started\nTo get started with OSE, refer to the {{#crossLinkModule \"bundle\"}}ose-bundle{{/crossLinkModule}} package and\n{{#crossLinkModule \"bundle.media\"}}Media player example application{{/crossLinkModule}}.\n\n## Modules\nOpen Smart Environment Raspberry package consists of the following modules:\n- Raspberry PI camera kind\n- Raspberry PI kind\n- OSE Raspberry core\n- OSE Raspberry content\n\n### Raspberry PI camera kind\n{{#crossLink \"ose.lib.kind\"}}Entry kind{{/crossLink}} describing Raspberry PI cameras. It uses the raspicam\nnpm package to take pictures.\n\nModule {{#crossLink \"rpi.lib.camera\"}}Raspberry PI camera kind{{/crossLink}} reference ... \n\n### Raspberry PI kind\n{{#crossLink \"ose.lib.kind\"}}Entry kind{{/crossLink}} describing Raspberry PI boards. It is possible to\ncontrol GPIO pins using the {{#crossLinkModule \"control.pin\"}}Pins{{/crossLinkModule}} class.\n\nModule {{#crossLink \"rpi.lib.rpi\"}}Raspberry PI kind{{/crossLink}} reference ... \n\n### OSE Raspberry core\nCore singleton of ose-rpi npm package. Registers {{#crossLink \"ose.lib.kind\"}}entry kinds{{/crossLink}}\ndefined by this package to the `\"control\"` {{#crossLink \"ose.lib.scope\"}}scope{{/crossLink}}.\n\nModule {{#crossLink \"rpi.lib\"}}OSE Raspberry core{{/crossLink}} reference ... \n\n### OSE Raspberry content\nProvides files of OSE Raspberry package to the browser.\n\nModule {{#crossLink \"rpi.content\"}}OSE Raspberry content{{/crossLink}} reference ... \n\n## Contributions\nTo get started contributing or coding, it is good to read about the\ntwo main npm packages {{#crossLinkModule \"ose\"}}ose{{/crossLinkModule}} and {{#crossLinkModule \"bb\"}}ose-bb{{/crossLinkModule}}.\n\nThis software is in the pre-alpha stage. At the moment, it is\npremature to file bugs. Input is, however, much welcome in the form\nof ideas, comments and general suggestions.  Feel free to contact\nus via\n[github.com/opensmartenvironment](https://github.com/opensmartenvironment).\n\n## Licence\nThis software is licensed under the terms of the [GNU GPL version\n3](../LICENCE) or later\n"
        },
        {
            "displayName": "videolan",
            "name": "videolan",
            "description": "This package contains {{#crossLink \"ose.lib.kind\"}}entry kinds{{/crossLink}} integrating VideoLAN software\ninto OSE.\n\nIt allows the {{#crossLinkModule \"media\"}}OSE Media player{{/crossLinkModule}} to use VLC as its playback\napplication and DVBlast as its DVB streamer.\n\n## Status\n- Pre-alpha stage (insecure and buggy)\n- Unstable API\n- Gaps in the documentation\n- No test suite\n\nThis is not yet a piece of download-and-use software. Its important\nto understand the basic principles covered by this documentation.\n\nUse of this software is currently recommended only for users that\nwish participate in the development process (see Contributions).\n\nTODO: Make contribution a link\n\n## Getting started\nTo get started with OSE, refer to the {{#crossLinkModule \"bundle\"}}ose-bundle{{/crossLinkModule}} package and\n{{#crossLinkModule \"bundle.media\"}}Media player example application{{/crossLinkModule}}.\n\n## Modules\nOpen Smart Environment VideoLAN package consists of the following modules:\n- DVBlast kind\n- DVBlast response socket\n- VLC kind\n- OSE VideoLAN core\n- OSE VideoLAN content\n\n### DVBlast kind\n{{#crossLink \"ose.lib.kind\"}}Entry kind{{/crossLink}} allowing to control DVBlast software\n\nModule {{#crossLink \"videolan.lib.dvblast\"}}DVBlast kind{{/crossLink}} reference ... \n\n### DVBlast response socket\n{{#crossLinkModule \"ose.link\"}}Response socket{{/crossLinkModule}} relaying the switch entry events to the client.\n\nTODO\n\nModule {{#crossLink \"videolan.lib.dvblast.master\"}}DVBlast response socket{{/crossLink}} reference ... \n\n### VLC kind\n{{#crossLink \"ose.lib.kind\"}}Entry kind{{/crossLink}} allowing to control VLC\n\nModule {{#crossLink \"videolan.lib.vlc\"}}VLC kind{{/crossLink}} reference ... \n\n### OSE VideoLAN core\nCore singleton of ose-videolan npm package. Registers {{#crossLink \"ose.lib.kind\"}}entry kinds{{/crossLink}}\ndefined by this package to the `\"control\"` {{#crossLink \"ose.lib.scope\"}}scope{{/crossLink}}.\n\nModule {{#crossLink \"videolan.lib\"}}OSE VideoLAN core{{/crossLink}} reference ... \n\n### OSE VideoLAN content\nProvides files of OSE VideoLAN package to the browser.\n\nModule {{#crossLink \"videolan.content\"}}OSE VideoLAN content{{/crossLink}} reference ... \n\n## Contributions\nTo get started contributing or coding, it is good to read about the\ntwo main npm packages {{#crossLinkModule \"ose\"}}ose{{/crossLinkModule}} and {{#crossLinkModule \"bb\"}}ose-bb{{/crossLinkModule}}.\n\nThis software is in the pre-alpha stage. At the moment, it is\npremature to file bugs. Input is, however, much welcome in the form\nof ideas, comments and general suggestions.  Feel free to contact\nus via\n[github.com/opensmartenvironment](https://github.com/opensmartenvironment).\n\n## Licence\nThis software is licensed under the terms of the [GNU GPL version\n3](../LICENCE) or later\n"
        },
        {
            "displayName": "xorg",
            "name": "xorg",
            "description": "This package allows to control the X.Org server with xdotool.\n\n## Status\n- Pre-alpha stage (insecure and buggy)\n- Unstable API\n- Gaps in the documentation\n- No test suite\n\nThis is not yet a piece of download-and-use software. Its important\nto understand the basic principles covered by this documentation.\n\nUse of this software is currently recommended only for users that\nwish participate in the development process (see Contributions).\n\nTODO: Make contribution a link\n\n## Getting started\nTo get started with OSE, refer to the {{#crossLinkModule \"bundle\"}}ose-bundle{{/crossLinkModule}} package and\n{{#crossLinkModule \"bundle.media\"}}Media player example application{{/crossLinkModule}}.\n\n## Modules\nOpen Smart Environment X.Org package consists of the following modules:\n- X.Org server kind\n- OSE X.Org core\n- OSE X.Org content\n\n### X.Org server kind\n{{#crossLink \"ose.lib.kind\"}}Entry kind{{/crossLink}} for X.Org server\n\nIt uses xdotool to remotely control the desktop.\n\nModule {{#crossLink \"xorg.lib.xorg\"}}X.Org server kind{{/crossLink}} reference ... \n\n### OSE X.Org core\nCore singleton of ose-xorg npm package. Registers {{#crossLink \"ose.lib.kind\"}}entry kinds{{/crossLink}}\ndefined by this package to the `\"control\"` {{#crossLink \"ose.lib.scope\"}}scope{{/crossLink}}.\n\nModule {{#crossLink \"xorg.lib\"}}OSE X.Org core{{/crossLink}} reference ... \n\n### OSE X.Org content\nProvides files of OSE X.Org package to the browser.\n\nModule {{#crossLink \"xorg.content\"}}OSE X.Org content{{/crossLink}} reference ... \n\n## Contributions\nTo get started contributing or coding, it is good to read about the\ntwo main npm packages {{#crossLinkModule \"ose\"}}ose{{/crossLinkModule}} and {{#crossLinkModule \"bb\"}}ose-bb{{/crossLinkModule}}.\n\nThis software is in the pre-alpha stage. At the moment, it is\npremature to file bugs. Input is, however, much welcome in the form\nof ideas, comments and general suggestions.  Feel free to contact\nus via\n[github.com/opensmartenvironment](https://github.com/opensmartenvironment).\n\n## Licence\nThis software is licensed under the terms of the [GNU GPL version\n3](../LICENCE) or later\n"
        },
        {
            "displayName": "youtube",
            "name": "youtube",
            "description": "This package integrates searching and playing YouTube videos into\nthe {{#crossLinkModule \"media\"}}OSE Media player{{/crossLinkModule}}.\n\nIt contains the definition of the YouTube stream {{#crossLink \"ose.lib.kind\"}}entry kind{{/crossLink}} and\nregisters it as a source to {{#crossLinkModule \"media\"}}OSE Media player{{/crossLinkModule}}.\n\n## Status\n- Pre-alpha stage (insecure and buggy)\n- Unstable API\n- Gaps in the documentation\n- No test suite\n\nThis is not yet a piece of download-and-use software. Its important\nto understand the basic principles covered by this documentation.\n\nUse of this software is currently recommended only for users that\nwish participate in the development process (see Contributions).\n\nTODO: Make contribution a link\n\n## Getting started\nTo get started with OSE, refer to the {{#crossLinkModule \"bundle\"}}ose-bundle{{/crossLinkModule}} package and\n{{#crossLinkModule \"bundle.media\"}}Media player example application{{/crossLinkModule}}.\n\n## Modules\nOpen Smart Environment YouTube package consists of the following modules:\n- Youtube video kind\n- OSE YouTube core\n- OSE YouTube content\n\n### Youtube video kind\n{{#crossLink \"ose.lib.kind\"}}Entry kind{{/crossLink}} representing Youtube videos.\n\nModule {{#crossLink \"youtube.lib.video\"}}Youtube video kind{{/crossLink}} reference ... \n\n### OSE YouTube core\nCore singleton of ose-youtube npm package. Registers {{#crossLink \"ose.lib.kind\"}}entry kinds{{/crossLink}}\ndefined by this package to the `\"media\"` {{#crossLink \"ose.lib.scope\"}}scope{{/crossLink}}.\n\nModule {{#crossLink \"youtube.lib\"}}OSE YouTube core{{/crossLink}} reference ... \n\n### OSE YouTube content\nProvides files of OSE YouTube package to the browser.\n\nModule {{#crossLink \"youtube.content\"}}OSE YouTube content{{/crossLink}} reference ... \n\n## Contributions\nTo get started contributing or coding, it is good to read about the\ntwo main npm packages {{#crossLinkModule \"ose\"}}ose{{/crossLinkModule}} and {{#crossLinkModule \"bb\"}}ose-bb{{/crossLinkModule}}.\n\nThis software is in the pre-alpha stage. At the moment, it is\npremature to file bugs. Input is, however, much welcome in the form\nof ideas, comments and general suggestions.  Feel free to contact\nus via\n[github.com/opensmartenvironment](https://github.com/opensmartenvironment).\n\n## Licence\nThis software is licensed under the terms of the [GNU GPL version\n3](../LICENCE) or later\n"
        }
    ]
} };
});